

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("bitkitcore")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_bitkitcore_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_bitkitcore_checksum_func_add_tags() != 63739:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_create_cjit_entry() != 51504:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_create_order() != 33461:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_decode() != 28437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_delete_activity_by_id() != 29867:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_estimate_order_fee() != 9548:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_estimate_order_fee_full() != 13361:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_activities() != 21347:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_activities_by_tag() != 52823:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_activity_by_id() != 44227:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_all_unique_tags() != 25431:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_cjit_entries() != 29342:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_info() != 43607:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 5475:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee() != 6427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_orders() != 47460:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_tags() != 11308:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_init_db() != 9643:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_initialize_trezor_library() != 22908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_insert_activity() != 1510:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_open_channel() != 21402:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries() != 5324:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_refresh_active_orders() != 50661:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_register_device() != 54847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_regtest_close_channel() != 48652:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_regtest_deposit() != 30356:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_regtest_get_payment() != 56623:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_regtest_mine() != 58685:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_regtest_pay() != 48342:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_remove_tags() != 58873:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_test_notification() != 32857:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_update_activity() != 42510:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_update_blocktank_url() != 52161:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_upsert_activity() != 32175:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 56003:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_bitkitcore_fn_func_add_tags.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_add_tags.restype = None
_UniffiLib.uniffi_bitkitcore_fn_func_create_cjit_entry.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_create_cjit_entry.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_create_order.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_create_order.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_decode.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_decode.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_delete_activity_by_id.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_delete_activity_by_id.restype = ctypes.c_int8
_UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee_full.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee_full.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_activities.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_activities.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_get_activities_by_tag.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_activities_by_tag.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_get_activity_by_id.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_activity_by_id.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_get_all_unique_tags.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_all_unique_tags.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_get_cjit_entries.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_cjit_entries.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_info.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_info.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_orders.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_orders.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_get_tags.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_tags.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_init_db.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_init_db.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_initialize_trezor_library.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_initialize_trezor_library.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bitkitcore_fn_func_insert_activity.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_insert_activity.restype = None
_UniffiLib.uniffi_bitkitcore_fn_func_open_channel.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_open_channel.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_cjit_entries.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_cjit_entries.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_orders.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_orders.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_register_device.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_register_device.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_close_channel.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_close_channel.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_deposit.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_deposit.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_get_payment.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_get_payment.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_mine.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_mine.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_pay.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_regtest_pay.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_remove_tags.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_remove_tags.restype = None
_UniffiLib.uniffi_bitkitcore_fn_func_test_notification.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_test_notification.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_update_activity.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_update_activity.restype = None
_UniffiLib.uniffi_bitkitcore_fn_func_update_blocktank_url.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_update_blocktank_url.restype = ctypes.c_uint64
_UniffiLib.uniffi_bitkitcore_fn_func_upsert_activity.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_upsert_activity.restype = None
_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_free.restype = None
_UniffiLib.ffi_bitkitcore_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_bitkitcore_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_bitkitcore_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_bitkitcore_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_bitkitcore_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_bitkitcore_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_bitkitcore_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_bitkitcore_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_bitkitcore_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_bitkitcore_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_bitkitcore_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_void.restype = None
_UniffiLib.uniffi_bitkitcore_checksum_func_add_tags.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_add_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_create_cjit_entry.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_create_cjit_entry.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_create_order.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_create_order.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_decode.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_delete_activity_by_id.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_delete_activity_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_estimate_order_fee.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_estimate_order_fee.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_estimate_order_fee_full.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_estimate_order_fee_full.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activities.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activities.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activities_by_tag.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activities_by_tag.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activity_by_id.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_activity_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_all_unique_tags.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_all_unique_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_cjit_entries.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_cjit_entries.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_info.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_orders.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_orders.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_tags.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_init_db.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_init_db.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_initialize_trezor_library.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_initialize_trezor_library.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_insert_activity.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_insert_activity.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_open_channel.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_open_channel.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_refresh_active_orders.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_refresh_active_orders.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_register_device.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_register_device.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_close_channel.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_close_channel.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_deposit.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_deposit.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_get_payment.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_get_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_mine.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_mine.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_pay.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_regtest_pay.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_remove_tags.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_remove_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_test_notification.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_test_notification.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_update_activity.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_update_activity.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_update_blocktank_url.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_update_blocktank_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_upsert_activity.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_upsert_activity.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address.restype = ctypes.c_uint16
_UniffiLib.ffi_bitkitcore_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_bitkitcore_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)


class CreateCjitOptions:
    source: "typing.Optional[str]"
    discount_code: "typing.Optional[str]"
    @typing.no_type_check
    def __init__(self, *, source: "typing.Optional[str]", discount_code: "typing.Optional[str]"):
        self.source = source
        self.discount_code = discount_code

    def __str__(self):
        return "CreateCjitOptions(source={}, discount_code={})".format(self.source, self.discount_code)

    def __eq__(self, other):
        if self.source != other.source:
            return False
        if self.discount_code != other.discount_code:
            return False
        return True

class _UniffiConverterTypeCreateCjitOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CreateCjitOptions(
            source=_UniffiConverterOptionalString.read(buf),
            discount_code=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.source)
        _UniffiConverterOptionalString.check_lower(value.discount_code)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.source, buf)
        _UniffiConverterOptionalString.write(value.discount_code, buf)


class CreateOrderOptions:
    client_balance_sat: "int"
    lsp_node_id: "typing.Optional[str]"
    coupon_code: "str"
    source: "typing.Optional[str]"
    discount_code: "typing.Optional[str]"
    zero_conf: "bool"
    zero_conf_payment: "typing.Optional[bool]"
    zero_reserve: "bool"
    client_node_id: "typing.Optional[str]"
    signature: "typing.Optional[str]"
    timestamp: "typing.Optional[str]"
    refund_onchain_address: "typing.Optional[str]"
    announce_channel: "bool"
    @typing.no_type_check
    def __init__(self, *, client_balance_sat: "int", lsp_node_id: "typing.Optional[str]", coupon_code: "str", source: "typing.Optional[str]", discount_code: "typing.Optional[str]", zero_conf: "bool", zero_conf_payment: "typing.Optional[bool]", zero_reserve: "bool", client_node_id: "typing.Optional[str]", signature: "typing.Optional[str]", timestamp: "typing.Optional[str]", refund_onchain_address: "typing.Optional[str]", announce_channel: "bool"):
        self.client_balance_sat = client_balance_sat
        self.lsp_node_id = lsp_node_id
        self.coupon_code = coupon_code
        self.source = source
        self.discount_code = discount_code
        self.zero_conf = zero_conf
        self.zero_conf_payment = zero_conf_payment
        self.zero_reserve = zero_reserve
        self.client_node_id = client_node_id
        self.signature = signature
        self.timestamp = timestamp
        self.refund_onchain_address = refund_onchain_address
        self.announce_channel = announce_channel

    def __str__(self):
        return "CreateOrderOptions(client_balance_sat={}, lsp_node_id={}, coupon_code={}, source={}, discount_code={}, zero_conf={}, zero_conf_payment={}, zero_reserve={}, client_node_id={}, signature={}, timestamp={}, refund_onchain_address={}, announce_channel={})".format(self.client_balance_sat, self.lsp_node_id, self.coupon_code, self.source, self.discount_code, self.zero_conf, self.zero_conf_payment, self.zero_reserve, self.client_node_id, self.signature, self.timestamp, self.refund_onchain_address, self.announce_channel)

    def __eq__(self, other):
        if self.client_balance_sat != other.client_balance_sat:
            return False
        if self.lsp_node_id != other.lsp_node_id:
            return False
        if self.coupon_code != other.coupon_code:
            return False
        if self.source != other.source:
            return False
        if self.discount_code != other.discount_code:
            return False
        if self.zero_conf != other.zero_conf:
            return False
        if self.zero_conf_payment != other.zero_conf_payment:
            return False
        if self.zero_reserve != other.zero_reserve:
            return False
        if self.client_node_id != other.client_node_id:
            return False
        if self.signature != other.signature:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.refund_onchain_address != other.refund_onchain_address:
            return False
        if self.announce_channel != other.announce_channel:
            return False
        return True

class _UniffiConverterTypeCreateOrderOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CreateOrderOptions(
            client_balance_sat=_UniffiConverterUInt64.read(buf),
            lsp_node_id=_UniffiConverterOptionalString.read(buf),
            coupon_code=_UniffiConverterString.read(buf),
            source=_UniffiConverterOptionalString.read(buf),
            discount_code=_UniffiConverterOptionalString.read(buf),
            zero_conf=_UniffiConverterBool.read(buf),
            zero_conf_payment=_UniffiConverterOptionalBool.read(buf),
            zero_reserve=_UniffiConverterBool.read(buf),
            client_node_id=_UniffiConverterOptionalString.read(buf),
            signature=_UniffiConverterOptionalString.read(buf),
            timestamp=_UniffiConverterOptionalString.read(buf),
            refund_onchain_address=_UniffiConverterOptionalString.read(buf),
            announce_channel=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.client_balance_sat)
        _UniffiConverterOptionalString.check_lower(value.lsp_node_id)
        _UniffiConverterString.check_lower(value.coupon_code)
        _UniffiConverterOptionalString.check_lower(value.source)
        _UniffiConverterOptionalString.check_lower(value.discount_code)
        _UniffiConverterBool.check_lower(value.zero_conf)
        _UniffiConverterOptionalBool.check_lower(value.zero_conf_payment)
        _UniffiConverterBool.check_lower(value.zero_reserve)
        _UniffiConverterOptionalString.check_lower(value.client_node_id)
        _UniffiConverterOptionalString.check_lower(value.signature)
        _UniffiConverterOptionalString.check_lower(value.timestamp)
        _UniffiConverterOptionalString.check_lower(value.refund_onchain_address)
        _UniffiConverterBool.check_lower(value.announce_channel)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.client_balance_sat, buf)
        _UniffiConverterOptionalString.write(value.lsp_node_id, buf)
        _UniffiConverterString.write(value.coupon_code, buf)
        _UniffiConverterOptionalString.write(value.source, buf)
        _UniffiConverterOptionalString.write(value.discount_code, buf)
        _UniffiConverterBool.write(value.zero_conf, buf)
        _UniffiConverterOptionalBool.write(value.zero_conf_payment, buf)
        _UniffiConverterBool.write(value.zero_reserve, buf)
        _UniffiConverterOptionalString.write(value.client_node_id, buf)
        _UniffiConverterOptionalString.write(value.signature, buf)
        _UniffiConverterOptionalString.write(value.timestamp, buf)
        _UniffiConverterOptionalString.write(value.refund_onchain_address, buf)
        _UniffiConverterBool.write(value.announce_channel, buf)


class ErrorData:
    error_details: "str"
    @typing.no_type_check
    def __init__(self, *, error_details: "str"):
        self.error_details = error_details

    def __str__(self):
        return "ErrorData(error_details={})".format(self.error_details)

    def __eq__(self, other):
        if self.error_details != other.error_details:
            return False
        return True

class _UniffiConverterTypeErrorData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ErrorData(
            error_details=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.error_details)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.error_details, buf)


class FeeRates:
    fast: "int"
    mid: "int"
    slow: "int"
    @typing.no_type_check
    def __init__(self, *, fast: "int", mid: "int", slow: "int"):
        self.fast = fast
        self.mid = mid
        self.slow = slow

    def __str__(self):
        return "FeeRates(fast={}, mid={}, slow={})".format(self.fast, self.mid, self.slow)

    def __eq__(self, other):
        if self.fast != other.fast:
            return False
        if self.mid != other.mid:
            return False
        if self.slow != other.slow:
            return False
        return True

class _UniffiConverterTypeFeeRates(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return FeeRates(
            fast=_UniffiConverterUInt32.read(buf),
            mid=_UniffiConverterUInt32.read(buf),
            slow=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.fast)
        _UniffiConverterUInt32.check_lower(value.mid)
        _UniffiConverterUInt32.check_lower(value.slow)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.fast, buf)
        _UniffiConverterUInt32.write(value.mid, buf)
        _UniffiConverterUInt32.write(value.slow, buf)


class FundingTx:
    id: "str"
    vout: "int"
    @typing.no_type_check
    def __init__(self, *, id: "str", vout: "int"):
        self.id = id
        self.vout = vout

    def __str__(self):
        return "FundingTx(id={}, vout={})".format(self.id, self.vout)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.vout != other.vout:
            return False
        return True

class _UniffiConverterTypeFundingTx(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return FundingTx(
            id=_UniffiConverterString.read(buf),
            vout=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterUInt64.check_lower(value.vout)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterUInt64.write(value.vout, buf)


class IBt0ConfMinTxFeeWindow:
    sat_per_vbyte: "float"
    validity_ends_at: "str"
    @typing.no_type_check
    def __init__(self, *, sat_per_vbyte: "float", validity_ends_at: "str"):
        self.sat_per_vbyte = sat_per_vbyte
        self.validity_ends_at = validity_ends_at

    def __str__(self):
        return "IBt0ConfMinTxFeeWindow(sat_per_vbyte={}, validity_ends_at={})".format(self.sat_per_vbyte, self.validity_ends_at)

    def __eq__(self, other):
        if self.sat_per_vbyte != other.sat_per_vbyte:
            return False
        if self.validity_ends_at != other.validity_ends_at:
            return False
        return True

class _UniffiConverterTypeIBt0ConfMinTxFeeWindow(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBt0ConfMinTxFeeWindow(
            sat_per_vbyte=_UniffiConverterDouble.read(buf),
            validity_ends_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterDouble.check_lower(value.sat_per_vbyte)
        _UniffiConverterString.check_lower(value.validity_ends_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterDouble.write(value.sat_per_vbyte, buf)
        _UniffiConverterString.write(value.validity_ends_at, buf)


class IBtBolt11Invoice:
    request: "str"
    state: "BtBolt11InvoiceState"
    expires_at: "str"
    updated_at: "str"
    @typing.no_type_check
    def __init__(self, *, request: "str", state: "BtBolt11InvoiceState", expires_at: "str", updated_at: "str"):
        self.request = request
        self.state = state
        self.expires_at = expires_at
        self.updated_at = updated_at

    def __str__(self):
        return "IBtBolt11Invoice(request={}, state={}, expires_at={}, updated_at={})".format(self.request, self.state, self.expires_at, self.updated_at)

    def __eq__(self, other):
        if self.request != other.request:
            return False
        if self.state != other.state:
            return False
        if self.expires_at != other.expires_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class _UniffiConverterTypeIBtBolt11Invoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtBolt11Invoice(
            request=_UniffiConverterString.read(buf),
            state=_UniffiConverterTypeBtBolt11InvoiceState.read(buf),
            expires_at=_UniffiConverterString.read(buf),
            updated_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.request)
        _UniffiConverterTypeBtBolt11InvoiceState.check_lower(value.state)
        _UniffiConverterString.check_lower(value.expires_at)
        _UniffiConverterString.check_lower(value.updated_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.request, buf)
        _UniffiConverterTypeBtBolt11InvoiceState.write(value.state, buf)
        _UniffiConverterString.write(value.expires_at, buf)
        _UniffiConverterString.write(value.updated_at, buf)


class IBtChannel:
    state: "BtOpenChannelState"
    lsp_node_pubkey: "str"
    client_node_pubkey: "str"
    announce_channel: "bool"
    funding_tx: "FundingTx"
    closing_tx_id: "typing.Optional[str]"
    close: "typing.Optional[IBtChannelClose]"
    short_channel_id: "typing.Optional[str]"
    @typing.no_type_check
    def __init__(self, *, state: "BtOpenChannelState", lsp_node_pubkey: "str", client_node_pubkey: "str", announce_channel: "bool", funding_tx: "FundingTx", closing_tx_id: "typing.Optional[str]", close: "typing.Optional[IBtChannelClose]", short_channel_id: "typing.Optional[str]"):
        self.state = state
        self.lsp_node_pubkey = lsp_node_pubkey
        self.client_node_pubkey = client_node_pubkey
        self.announce_channel = announce_channel
        self.funding_tx = funding_tx
        self.closing_tx_id = closing_tx_id
        self.close = close
        self.short_channel_id = short_channel_id

    def __str__(self):
        return "IBtChannel(state={}, lsp_node_pubkey={}, client_node_pubkey={}, announce_channel={}, funding_tx={}, closing_tx_id={}, close={}, short_channel_id={})".format(self.state, self.lsp_node_pubkey, self.client_node_pubkey, self.announce_channel, self.funding_tx, self.closing_tx_id, self.close, self.short_channel_id)

    def __eq__(self, other):
        if self.state != other.state:
            return False
        if self.lsp_node_pubkey != other.lsp_node_pubkey:
            return False
        if self.client_node_pubkey != other.client_node_pubkey:
            return False
        if self.announce_channel != other.announce_channel:
            return False
        if self.funding_tx != other.funding_tx:
            return False
        if self.closing_tx_id != other.closing_tx_id:
            return False
        if self.close != other.close:
            return False
        if self.short_channel_id != other.short_channel_id:
            return False
        return True

class _UniffiConverterTypeIBtChannel(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtChannel(
            state=_UniffiConverterTypeBtOpenChannelState.read(buf),
            lsp_node_pubkey=_UniffiConverterString.read(buf),
            client_node_pubkey=_UniffiConverterString.read(buf),
            announce_channel=_UniffiConverterBool.read(buf),
            funding_tx=_UniffiConverterTypeFundingTx.read(buf),
            closing_tx_id=_UniffiConverterOptionalString.read(buf),
            close=_UniffiConverterOptionalTypeIBtChannelClose.read(buf),
            short_channel_id=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeBtOpenChannelState.check_lower(value.state)
        _UniffiConverterString.check_lower(value.lsp_node_pubkey)
        _UniffiConverterString.check_lower(value.client_node_pubkey)
        _UniffiConverterBool.check_lower(value.announce_channel)
        _UniffiConverterTypeFundingTx.check_lower(value.funding_tx)
        _UniffiConverterOptionalString.check_lower(value.closing_tx_id)
        _UniffiConverterOptionalTypeIBtChannelClose.check_lower(value.close)
        _UniffiConverterOptionalString.check_lower(value.short_channel_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeBtOpenChannelState.write(value.state, buf)
        _UniffiConverterString.write(value.lsp_node_pubkey, buf)
        _UniffiConverterString.write(value.client_node_pubkey, buf)
        _UniffiConverterBool.write(value.announce_channel, buf)
        _UniffiConverterTypeFundingTx.write(value.funding_tx, buf)
        _UniffiConverterOptionalString.write(value.closing_tx_id, buf)
        _UniffiConverterOptionalTypeIBtChannelClose.write(value.close, buf)
        _UniffiConverterOptionalString.write(value.short_channel_id, buf)


class IBtChannelClose:
    tx_id: "str"
    close_type: "str"
    initiator: "str"
    registered_at: "str"
    @typing.no_type_check
    def __init__(self, *, tx_id: "str", close_type: "str", initiator: "str", registered_at: "str"):
        self.tx_id = tx_id
        self.close_type = close_type
        self.initiator = initiator
        self.registered_at = registered_at

    def __str__(self):
        return "IBtChannelClose(tx_id={}, close_type={}, initiator={}, registered_at={})".format(self.tx_id, self.close_type, self.initiator, self.registered_at)

    def __eq__(self, other):
        if self.tx_id != other.tx_id:
            return False
        if self.close_type != other.close_type:
            return False
        if self.initiator != other.initiator:
            return False
        if self.registered_at != other.registered_at:
            return False
        return True

class _UniffiConverterTypeIBtChannelClose(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtChannelClose(
            tx_id=_UniffiConverterString.read(buf),
            close_type=_UniffiConverterString.read(buf),
            initiator=_UniffiConverterString.read(buf),
            registered_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.tx_id)
        _UniffiConverterString.check_lower(value.close_type)
        _UniffiConverterString.check_lower(value.initiator)
        _UniffiConverterString.check_lower(value.registered_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.tx_id, buf)
        _UniffiConverterString.write(value.close_type, buf)
        _UniffiConverterString.write(value.initiator, buf)
        _UniffiConverterString.write(value.registered_at, buf)


class IBtEstimateFeeResponse:
    fee_sat: "int"
    min_0_conf_tx_fee: "IBt0ConfMinTxFeeWindow"
    @typing.no_type_check
    def __init__(self, *, fee_sat: "int", min_0_conf_tx_fee: "IBt0ConfMinTxFeeWindow"):
        self.fee_sat = fee_sat
        self.min_0_conf_tx_fee = min_0_conf_tx_fee

    def __str__(self):
        return "IBtEstimateFeeResponse(fee_sat={}, min_0_conf_tx_fee={})".format(self.fee_sat, self.min_0_conf_tx_fee)

    def __eq__(self, other):
        if self.fee_sat != other.fee_sat:
            return False
        if self.min_0_conf_tx_fee != other.min_0_conf_tx_fee:
            return False
        return True

class _UniffiConverterTypeIBtEstimateFeeResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtEstimateFeeResponse(
            fee_sat=_UniffiConverterUInt64.read(buf),
            min_0_conf_tx_fee=_UniffiConverterTypeIBt0ConfMinTxFeeWindow.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.fee_sat)
        _UniffiConverterTypeIBt0ConfMinTxFeeWindow.check_lower(value.min_0_conf_tx_fee)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.fee_sat, buf)
        _UniffiConverterTypeIBt0ConfMinTxFeeWindow.write(value.min_0_conf_tx_fee, buf)


class IBtEstimateFeeResponse2:
    fee_sat: "int"
    network_fee_sat: "int"
    service_fee_sat: "int"
    min_0_conf_tx_fee: "IBt0ConfMinTxFeeWindow"
    @typing.no_type_check
    def __init__(self, *, fee_sat: "int", network_fee_sat: "int", service_fee_sat: "int", min_0_conf_tx_fee: "IBt0ConfMinTxFeeWindow"):
        self.fee_sat = fee_sat
        self.network_fee_sat = network_fee_sat
        self.service_fee_sat = service_fee_sat
        self.min_0_conf_tx_fee = min_0_conf_tx_fee

    def __str__(self):
        return "IBtEstimateFeeResponse2(fee_sat={}, network_fee_sat={}, service_fee_sat={}, min_0_conf_tx_fee={})".format(self.fee_sat, self.network_fee_sat, self.service_fee_sat, self.min_0_conf_tx_fee)

    def __eq__(self, other):
        if self.fee_sat != other.fee_sat:
            return False
        if self.network_fee_sat != other.network_fee_sat:
            return False
        if self.service_fee_sat != other.service_fee_sat:
            return False
        if self.min_0_conf_tx_fee != other.min_0_conf_tx_fee:
            return False
        return True

class _UniffiConverterTypeIBtEstimateFeeResponse2(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtEstimateFeeResponse2(
            fee_sat=_UniffiConverterUInt64.read(buf),
            network_fee_sat=_UniffiConverterUInt64.read(buf),
            service_fee_sat=_UniffiConverterUInt64.read(buf),
            min_0_conf_tx_fee=_UniffiConverterTypeIBt0ConfMinTxFeeWindow.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.fee_sat)
        _UniffiConverterUInt64.check_lower(value.network_fee_sat)
        _UniffiConverterUInt64.check_lower(value.service_fee_sat)
        _UniffiConverterTypeIBt0ConfMinTxFeeWindow.check_lower(value.min_0_conf_tx_fee)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.fee_sat, buf)
        _UniffiConverterUInt64.write(value.network_fee_sat, buf)
        _UniffiConverterUInt64.write(value.service_fee_sat, buf)
        _UniffiConverterTypeIBt0ConfMinTxFeeWindow.write(value.min_0_conf_tx_fee, buf)


class IBtInfo:
    version: "int"
    nodes: "typing.List[ILspNode]"
    options: "IBtInfoOptions"
    versions: "IBtInfoVersions"
    onchain: "IBtInfoOnchain"
    @typing.no_type_check
    def __init__(self, *, version: "int", nodes: "typing.List[ILspNode]", options: "IBtInfoOptions", versions: "IBtInfoVersions", onchain: "IBtInfoOnchain"):
        self.version = version
        self.nodes = nodes
        self.options = options
        self.versions = versions
        self.onchain = onchain

    def __str__(self):
        return "IBtInfo(version={}, nodes={}, options={}, versions={}, onchain={})".format(self.version, self.nodes, self.options, self.versions, self.onchain)

    def __eq__(self, other):
        if self.version != other.version:
            return False
        if self.nodes != other.nodes:
            return False
        if self.options != other.options:
            return False
        if self.versions != other.versions:
            return False
        if self.onchain != other.onchain:
            return False
        return True

class _UniffiConverterTypeIBtInfo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtInfo(
            version=_UniffiConverterUInt32.read(buf),
            nodes=_UniffiConverterSequenceTypeILspNode.read(buf),
            options=_UniffiConverterTypeIBtInfoOptions.read(buf),
            versions=_UniffiConverterTypeIBtInfoVersions.read(buf),
            onchain=_UniffiConverterTypeIBtInfoOnchain.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.version)
        _UniffiConverterSequenceTypeILspNode.check_lower(value.nodes)
        _UniffiConverterTypeIBtInfoOptions.check_lower(value.options)
        _UniffiConverterTypeIBtInfoVersions.check_lower(value.versions)
        _UniffiConverterTypeIBtInfoOnchain.check_lower(value.onchain)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.version, buf)
        _UniffiConverterSequenceTypeILspNode.write(value.nodes, buf)
        _UniffiConverterTypeIBtInfoOptions.write(value.options, buf)
        _UniffiConverterTypeIBtInfoVersions.write(value.versions, buf)
        _UniffiConverterTypeIBtInfoOnchain.write(value.onchain, buf)


class IBtInfoOnchain:
    network: "BitcoinNetworkEnum"
    fee_rates: "FeeRates"
    @typing.no_type_check
    def __init__(self, *, network: "BitcoinNetworkEnum", fee_rates: "FeeRates"):
        self.network = network
        self.fee_rates = fee_rates

    def __str__(self):
        return "IBtInfoOnchain(network={}, fee_rates={})".format(self.network, self.fee_rates)

    def __eq__(self, other):
        if self.network != other.network:
            return False
        if self.fee_rates != other.fee_rates:
            return False
        return True

class _UniffiConverterTypeIBtInfoOnchain(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtInfoOnchain(
            network=_UniffiConverterTypeBitcoinNetworkEnum.read(buf),
            fee_rates=_UniffiConverterTypeFeeRates.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeBitcoinNetworkEnum.check_lower(value.network)
        _UniffiConverterTypeFeeRates.check_lower(value.fee_rates)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeBitcoinNetworkEnum.write(value.network, buf)
        _UniffiConverterTypeFeeRates.write(value.fee_rates, buf)


class IBtInfoOptions:
    min_channel_size_sat: "int"
    max_channel_size_sat: "int"
    min_expiry_weeks: "int"
    max_expiry_weeks: "int"
    min_payment_confirmations: "int"
    min_high_risk_payment_confirmations: "int"
    max_0_conf_client_balance_sat: "int"
    max_client_balance_sat: "int"
    @typing.no_type_check
    def __init__(self, *, min_channel_size_sat: "int", max_channel_size_sat: "int", min_expiry_weeks: "int", max_expiry_weeks: "int", min_payment_confirmations: "int", min_high_risk_payment_confirmations: "int", max_0_conf_client_balance_sat: "int", max_client_balance_sat: "int"):
        self.min_channel_size_sat = min_channel_size_sat
        self.max_channel_size_sat = max_channel_size_sat
        self.min_expiry_weeks = min_expiry_weeks
        self.max_expiry_weeks = max_expiry_weeks
        self.min_payment_confirmations = min_payment_confirmations
        self.min_high_risk_payment_confirmations = min_high_risk_payment_confirmations
        self.max_0_conf_client_balance_sat = max_0_conf_client_balance_sat
        self.max_client_balance_sat = max_client_balance_sat

    def __str__(self):
        return "IBtInfoOptions(min_channel_size_sat={}, max_channel_size_sat={}, min_expiry_weeks={}, max_expiry_weeks={}, min_payment_confirmations={}, min_high_risk_payment_confirmations={}, max_0_conf_client_balance_sat={}, max_client_balance_sat={})".format(self.min_channel_size_sat, self.max_channel_size_sat, self.min_expiry_weeks, self.max_expiry_weeks, self.min_payment_confirmations, self.min_high_risk_payment_confirmations, self.max_0_conf_client_balance_sat, self.max_client_balance_sat)

    def __eq__(self, other):
        if self.min_channel_size_sat != other.min_channel_size_sat:
            return False
        if self.max_channel_size_sat != other.max_channel_size_sat:
            return False
        if self.min_expiry_weeks != other.min_expiry_weeks:
            return False
        if self.max_expiry_weeks != other.max_expiry_weeks:
            return False
        if self.min_payment_confirmations != other.min_payment_confirmations:
            return False
        if self.min_high_risk_payment_confirmations != other.min_high_risk_payment_confirmations:
            return False
        if self.max_0_conf_client_balance_sat != other.max_0_conf_client_balance_sat:
            return False
        if self.max_client_balance_sat != other.max_client_balance_sat:
            return False
        return True

class _UniffiConverterTypeIBtInfoOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtInfoOptions(
            min_channel_size_sat=_UniffiConverterUInt64.read(buf),
            max_channel_size_sat=_UniffiConverterUInt64.read(buf),
            min_expiry_weeks=_UniffiConverterUInt32.read(buf),
            max_expiry_weeks=_UniffiConverterUInt32.read(buf),
            min_payment_confirmations=_UniffiConverterUInt32.read(buf),
            min_high_risk_payment_confirmations=_UniffiConverterUInt32.read(buf),
            max_0_conf_client_balance_sat=_UniffiConverterUInt64.read(buf),
            max_client_balance_sat=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.min_channel_size_sat)
        _UniffiConverterUInt64.check_lower(value.max_channel_size_sat)
        _UniffiConverterUInt32.check_lower(value.min_expiry_weeks)
        _UniffiConverterUInt32.check_lower(value.max_expiry_weeks)
        _UniffiConverterUInt32.check_lower(value.min_payment_confirmations)
        _UniffiConverterUInt32.check_lower(value.min_high_risk_payment_confirmations)
        _UniffiConverterUInt64.check_lower(value.max_0_conf_client_balance_sat)
        _UniffiConverterUInt64.check_lower(value.max_client_balance_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.min_channel_size_sat, buf)
        _UniffiConverterUInt64.write(value.max_channel_size_sat, buf)
        _UniffiConverterUInt32.write(value.min_expiry_weeks, buf)
        _UniffiConverterUInt32.write(value.max_expiry_weeks, buf)
        _UniffiConverterUInt32.write(value.min_payment_confirmations, buf)
        _UniffiConverterUInt32.write(value.min_high_risk_payment_confirmations, buf)
        _UniffiConverterUInt64.write(value.max_0_conf_client_balance_sat, buf)
        _UniffiConverterUInt64.write(value.max_client_balance_sat, buf)


class IBtInfoVersions:
    http: "str"
    btc: "str"
    ln2: "str"
    @typing.no_type_check
    def __init__(self, *, http: "str", btc: "str", ln2: "str"):
        self.http = http
        self.btc = btc
        self.ln2 = ln2

    def __str__(self):
        return "IBtInfoVersions(http={}, btc={}, ln2={})".format(self.http, self.btc, self.ln2)

    def __eq__(self, other):
        if self.http != other.http:
            return False
        if self.btc != other.btc:
            return False
        if self.ln2 != other.ln2:
            return False
        return True

class _UniffiConverterTypeIBtInfoVersions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtInfoVersions(
            http=_UniffiConverterString.read(buf),
            btc=_UniffiConverterString.read(buf),
            ln2=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.http)
        _UniffiConverterString.check_lower(value.btc)
        _UniffiConverterString.check_lower(value.ln2)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.http, buf)
        _UniffiConverterString.write(value.btc, buf)
        _UniffiConverterString.write(value.ln2, buf)


class IBtOnchainTransaction:
    amount_sat: "int"
    tx_id: "str"
    vout: "int"
    block_height: "typing.Optional[int]"
    block_confirmation_count: "int"
    fee_rate_sat_per_vbyte: "float"
    confirmed: "bool"
    suspicious_0_conf_reason: "str"
    @typing.no_type_check
    def __init__(self, *, amount_sat: "int", tx_id: "str", vout: "int", block_height: "typing.Optional[int]", block_confirmation_count: "int", fee_rate_sat_per_vbyte: "float", confirmed: "bool", suspicious_0_conf_reason: "str"):
        self.amount_sat = amount_sat
        self.tx_id = tx_id
        self.vout = vout
        self.block_height = block_height
        self.block_confirmation_count = block_confirmation_count
        self.fee_rate_sat_per_vbyte = fee_rate_sat_per_vbyte
        self.confirmed = confirmed
        self.suspicious_0_conf_reason = suspicious_0_conf_reason

    def __str__(self):
        return "IBtOnchainTransaction(amount_sat={}, tx_id={}, vout={}, block_height={}, block_confirmation_count={}, fee_rate_sat_per_vbyte={}, confirmed={}, suspicious_0_conf_reason={})".format(self.amount_sat, self.tx_id, self.vout, self.block_height, self.block_confirmation_count, self.fee_rate_sat_per_vbyte, self.confirmed, self.suspicious_0_conf_reason)

    def __eq__(self, other):
        if self.amount_sat != other.amount_sat:
            return False
        if self.tx_id != other.tx_id:
            return False
        if self.vout != other.vout:
            return False
        if self.block_height != other.block_height:
            return False
        if self.block_confirmation_count != other.block_confirmation_count:
            return False
        if self.fee_rate_sat_per_vbyte != other.fee_rate_sat_per_vbyte:
            return False
        if self.confirmed != other.confirmed:
            return False
        if self.suspicious_0_conf_reason != other.suspicious_0_conf_reason:
            return False
        return True

class _UniffiConverterTypeIBtOnchainTransaction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtOnchainTransaction(
            amount_sat=_UniffiConverterUInt64.read(buf),
            tx_id=_UniffiConverterString.read(buf),
            vout=_UniffiConverterUInt32.read(buf),
            block_height=_UniffiConverterOptionalUInt32.read(buf),
            block_confirmation_count=_UniffiConverterUInt32.read(buf),
            fee_rate_sat_per_vbyte=_UniffiConverterDouble.read(buf),
            confirmed=_UniffiConverterBool.read(buf),
            suspicious_0_conf_reason=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.amount_sat)
        _UniffiConverterString.check_lower(value.tx_id)
        _UniffiConverterUInt32.check_lower(value.vout)
        _UniffiConverterOptionalUInt32.check_lower(value.block_height)
        _UniffiConverterUInt32.check_lower(value.block_confirmation_count)
        _UniffiConverterDouble.check_lower(value.fee_rate_sat_per_vbyte)
        _UniffiConverterBool.check_lower(value.confirmed)
        _UniffiConverterString.check_lower(value.suspicious_0_conf_reason)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.amount_sat, buf)
        _UniffiConverterString.write(value.tx_id, buf)
        _UniffiConverterUInt32.write(value.vout, buf)
        _UniffiConverterOptionalUInt32.write(value.block_height, buf)
        _UniffiConverterUInt32.write(value.block_confirmation_count, buf)
        _UniffiConverterDouble.write(value.fee_rate_sat_per_vbyte, buf)
        _UniffiConverterBool.write(value.confirmed, buf)
        _UniffiConverterString.write(value.suspicious_0_conf_reason, buf)


class IBtOnchainTransactions:
    address: "str"
    confirmed_sat: "int"
    required_confirmations: "int"
    transactions: "typing.List[IBtOnchainTransaction]"
    @typing.no_type_check
    def __init__(self, *, address: "str", confirmed_sat: "int", required_confirmations: "int", transactions: "typing.List[IBtOnchainTransaction]"):
        self.address = address
        self.confirmed_sat = confirmed_sat
        self.required_confirmations = required_confirmations
        self.transactions = transactions

    def __str__(self):
        return "IBtOnchainTransactions(address={}, confirmed_sat={}, required_confirmations={}, transactions={})".format(self.address, self.confirmed_sat, self.required_confirmations, self.transactions)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.confirmed_sat != other.confirmed_sat:
            return False
        if self.required_confirmations != other.required_confirmations:
            return False
        if self.transactions != other.transactions:
            return False
        return True

class _UniffiConverterTypeIBtOnchainTransactions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtOnchainTransactions(
            address=_UniffiConverterString.read(buf),
            confirmed_sat=_UniffiConverterUInt64.read(buf),
            required_confirmations=_UniffiConverterUInt32.read(buf),
            transactions=_UniffiConverterSequenceTypeIBtOnchainTransaction.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterUInt64.check_lower(value.confirmed_sat)
        _UniffiConverterUInt32.check_lower(value.required_confirmations)
        _UniffiConverterSequenceTypeIBtOnchainTransaction.check_lower(value.transactions)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterUInt64.write(value.confirmed_sat, buf)
        _UniffiConverterUInt32.write(value.required_confirmations, buf)
        _UniffiConverterSequenceTypeIBtOnchainTransaction.write(value.transactions, buf)


class IBtOrder:
    id: "str"
    state: "BtOrderState"
    state2: "BtOrderState2"
    fee_sat: "int"
    network_fee_sat: "int"
    service_fee_sat: "int"
    lsp_balance_sat: "int"
    client_balance_sat: "int"
    zero_conf: "bool"
    zero_reserve: "bool"
    client_node_id: "typing.Optional[str]"
    channel_expiry_weeks: "int"
    channel_expires_at: "str"
    order_expires_at: "str"
    channel: "typing.Optional[IBtChannel]"
    lsp_node: "ILspNode"
    lnurl: "typing.Optional[str]"
    payment: "IBtPayment"
    coupon_code: "typing.Optional[str]"
    source: "typing.Optional[str]"
    discount: "typing.Optional[IDiscount]"
    updated_at: "str"
    created_at: "str"
    @typing.no_type_check
    def __init__(self, *, id: "str", state: "BtOrderState", state2: "BtOrderState2", fee_sat: "int", network_fee_sat: "int", service_fee_sat: "int", lsp_balance_sat: "int", client_balance_sat: "int", zero_conf: "bool", zero_reserve: "bool", client_node_id: "typing.Optional[str]", channel_expiry_weeks: "int", channel_expires_at: "str", order_expires_at: "str", channel: "typing.Optional[IBtChannel]", lsp_node: "ILspNode", lnurl: "typing.Optional[str]", payment: "IBtPayment", coupon_code: "typing.Optional[str]", source: "typing.Optional[str]", discount: "typing.Optional[IDiscount]", updated_at: "str", created_at: "str"):
        self.id = id
        self.state = state
        self.state2 = state2
        self.fee_sat = fee_sat
        self.network_fee_sat = network_fee_sat
        self.service_fee_sat = service_fee_sat
        self.lsp_balance_sat = lsp_balance_sat
        self.client_balance_sat = client_balance_sat
        self.zero_conf = zero_conf
        self.zero_reserve = zero_reserve
        self.client_node_id = client_node_id
        self.channel_expiry_weeks = channel_expiry_weeks
        self.channel_expires_at = channel_expires_at
        self.order_expires_at = order_expires_at
        self.channel = channel
        self.lsp_node = lsp_node
        self.lnurl = lnurl
        self.payment = payment
        self.coupon_code = coupon_code
        self.source = source
        self.discount = discount
        self.updated_at = updated_at
        self.created_at = created_at

    def __str__(self):
        return "IBtOrder(id={}, state={}, state2={}, fee_sat={}, network_fee_sat={}, service_fee_sat={}, lsp_balance_sat={}, client_balance_sat={}, zero_conf={}, zero_reserve={}, client_node_id={}, channel_expiry_weeks={}, channel_expires_at={}, order_expires_at={}, channel={}, lsp_node={}, lnurl={}, payment={}, coupon_code={}, source={}, discount={}, updated_at={}, created_at={})".format(self.id, self.state, self.state2, self.fee_sat, self.network_fee_sat, self.service_fee_sat, self.lsp_balance_sat, self.client_balance_sat, self.zero_conf, self.zero_reserve, self.client_node_id, self.channel_expiry_weeks, self.channel_expires_at, self.order_expires_at, self.channel, self.lsp_node, self.lnurl, self.payment, self.coupon_code, self.source, self.discount, self.updated_at, self.created_at)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.state != other.state:
            return False
        if self.state2 != other.state2:
            return False
        if self.fee_sat != other.fee_sat:
            return False
        if self.network_fee_sat != other.network_fee_sat:
            return False
        if self.service_fee_sat != other.service_fee_sat:
            return False
        if self.lsp_balance_sat != other.lsp_balance_sat:
            return False
        if self.client_balance_sat != other.client_balance_sat:
            return False
        if self.zero_conf != other.zero_conf:
            return False
        if self.zero_reserve != other.zero_reserve:
            return False
        if self.client_node_id != other.client_node_id:
            return False
        if self.channel_expiry_weeks != other.channel_expiry_weeks:
            return False
        if self.channel_expires_at != other.channel_expires_at:
            return False
        if self.order_expires_at != other.order_expires_at:
            return False
        if self.channel != other.channel:
            return False
        if self.lsp_node != other.lsp_node:
            return False
        if self.lnurl != other.lnurl:
            return False
        if self.payment != other.payment:
            return False
        if self.coupon_code != other.coupon_code:
            return False
        if self.source != other.source:
            return False
        if self.discount != other.discount:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.created_at != other.created_at:
            return False
        return True

class _UniffiConverterTypeIBtOrder(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtOrder(
            id=_UniffiConverterString.read(buf),
            state=_UniffiConverterTypeBtOrderState.read(buf),
            state2=_UniffiConverterTypeBtOrderState2.read(buf),
            fee_sat=_UniffiConverterUInt64.read(buf),
            network_fee_sat=_UniffiConverterUInt64.read(buf),
            service_fee_sat=_UniffiConverterUInt64.read(buf),
            lsp_balance_sat=_UniffiConverterUInt64.read(buf),
            client_balance_sat=_UniffiConverterUInt64.read(buf),
            zero_conf=_UniffiConverterBool.read(buf),
            zero_reserve=_UniffiConverterBool.read(buf),
            client_node_id=_UniffiConverterOptionalString.read(buf),
            channel_expiry_weeks=_UniffiConverterUInt32.read(buf),
            channel_expires_at=_UniffiConverterString.read(buf),
            order_expires_at=_UniffiConverterString.read(buf),
            channel=_UniffiConverterOptionalTypeIBtChannel.read(buf),
            lsp_node=_UniffiConverterTypeILspNode.read(buf),
            lnurl=_UniffiConverterOptionalString.read(buf),
            payment=_UniffiConverterTypeIBtPayment.read(buf),
            coupon_code=_UniffiConverterOptionalString.read(buf),
            source=_UniffiConverterOptionalString.read(buf),
            discount=_UniffiConverterOptionalTypeIDiscount.read(buf),
            updated_at=_UniffiConverterString.read(buf),
            created_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypeBtOrderState.check_lower(value.state)
        _UniffiConverterTypeBtOrderState2.check_lower(value.state2)
        _UniffiConverterUInt64.check_lower(value.fee_sat)
        _UniffiConverterUInt64.check_lower(value.network_fee_sat)
        _UniffiConverterUInt64.check_lower(value.service_fee_sat)
        _UniffiConverterUInt64.check_lower(value.lsp_balance_sat)
        _UniffiConverterUInt64.check_lower(value.client_balance_sat)
        _UniffiConverterBool.check_lower(value.zero_conf)
        _UniffiConverterBool.check_lower(value.zero_reserve)
        _UniffiConverterOptionalString.check_lower(value.client_node_id)
        _UniffiConverterUInt32.check_lower(value.channel_expiry_weeks)
        _UniffiConverterString.check_lower(value.channel_expires_at)
        _UniffiConverterString.check_lower(value.order_expires_at)
        _UniffiConverterOptionalTypeIBtChannel.check_lower(value.channel)
        _UniffiConverterTypeILspNode.check_lower(value.lsp_node)
        _UniffiConverterOptionalString.check_lower(value.lnurl)
        _UniffiConverterTypeIBtPayment.check_lower(value.payment)
        _UniffiConverterOptionalString.check_lower(value.coupon_code)
        _UniffiConverterOptionalString.check_lower(value.source)
        _UniffiConverterOptionalTypeIDiscount.check_lower(value.discount)
        _UniffiConverterString.check_lower(value.updated_at)
        _UniffiConverterString.check_lower(value.created_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypeBtOrderState.write(value.state, buf)
        _UniffiConverterTypeBtOrderState2.write(value.state2, buf)
        _UniffiConverterUInt64.write(value.fee_sat, buf)
        _UniffiConverterUInt64.write(value.network_fee_sat, buf)
        _UniffiConverterUInt64.write(value.service_fee_sat, buf)
        _UniffiConverterUInt64.write(value.lsp_balance_sat, buf)
        _UniffiConverterUInt64.write(value.client_balance_sat, buf)
        _UniffiConverterBool.write(value.zero_conf, buf)
        _UniffiConverterBool.write(value.zero_reserve, buf)
        _UniffiConverterOptionalString.write(value.client_node_id, buf)
        _UniffiConverterUInt32.write(value.channel_expiry_weeks, buf)
        _UniffiConverterString.write(value.channel_expires_at, buf)
        _UniffiConverterString.write(value.order_expires_at, buf)
        _UniffiConverterOptionalTypeIBtChannel.write(value.channel, buf)
        _UniffiConverterTypeILspNode.write(value.lsp_node, buf)
        _UniffiConverterOptionalString.write(value.lnurl, buf)
        _UniffiConverterTypeIBtPayment.write(value.payment, buf)
        _UniffiConverterOptionalString.write(value.coupon_code, buf)
        _UniffiConverterOptionalString.write(value.source, buf)
        _UniffiConverterOptionalTypeIDiscount.write(value.discount, buf)
        _UniffiConverterString.write(value.updated_at, buf)
        _UniffiConverterString.write(value.created_at, buf)


class IBtPayment:
    state: "BtPaymentState"
    state2: "BtPaymentState2"
    paid_sat: "int"
    bolt11_invoice: "IBtBolt11Invoice"
    onchain: "IBtOnchainTransactions"
    is_manually_paid: "typing.Optional[bool]"
    manual_refunds: "typing.Optional[typing.List[IManualRefund]]"
    @typing.no_type_check
    def __init__(self, *, state: "BtPaymentState", state2: "BtPaymentState2", paid_sat: "int", bolt11_invoice: "IBtBolt11Invoice", onchain: "IBtOnchainTransactions", is_manually_paid: "typing.Optional[bool]", manual_refunds: "typing.Optional[typing.List[IManualRefund]]"):
        self.state = state
        self.state2 = state2
        self.paid_sat = paid_sat
        self.bolt11_invoice = bolt11_invoice
        self.onchain = onchain
        self.is_manually_paid = is_manually_paid
        self.manual_refunds = manual_refunds

    def __str__(self):
        return "IBtPayment(state={}, state2={}, paid_sat={}, bolt11_invoice={}, onchain={}, is_manually_paid={}, manual_refunds={})".format(self.state, self.state2, self.paid_sat, self.bolt11_invoice, self.onchain, self.is_manually_paid, self.manual_refunds)

    def __eq__(self, other):
        if self.state != other.state:
            return False
        if self.state2 != other.state2:
            return False
        if self.paid_sat != other.paid_sat:
            return False
        if self.bolt11_invoice != other.bolt11_invoice:
            return False
        if self.onchain != other.onchain:
            return False
        if self.is_manually_paid != other.is_manually_paid:
            return False
        if self.manual_refunds != other.manual_refunds:
            return False
        return True

class _UniffiConverterTypeIBtPayment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IBtPayment(
            state=_UniffiConverterTypeBtPaymentState.read(buf),
            state2=_UniffiConverterTypeBtPaymentState2.read(buf),
            paid_sat=_UniffiConverterUInt64.read(buf),
            bolt11_invoice=_UniffiConverterTypeIBtBolt11Invoice.read(buf),
            onchain=_UniffiConverterTypeIBtOnchainTransactions.read(buf),
            is_manually_paid=_UniffiConverterOptionalBool.read(buf),
            manual_refunds=_UniffiConverterOptionalSequenceTypeIManualRefund.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeBtPaymentState.check_lower(value.state)
        _UniffiConverterTypeBtPaymentState2.check_lower(value.state2)
        _UniffiConverterUInt64.check_lower(value.paid_sat)
        _UniffiConverterTypeIBtBolt11Invoice.check_lower(value.bolt11_invoice)
        _UniffiConverterTypeIBtOnchainTransactions.check_lower(value.onchain)
        _UniffiConverterOptionalBool.check_lower(value.is_manually_paid)
        _UniffiConverterOptionalSequenceTypeIManualRefund.check_lower(value.manual_refunds)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeBtPaymentState.write(value.state, buf)
        _UniffiConverterTypeBtPaymentState2.write(value.state2, buf)
        _UniffiConverterUInt64.write(value.paid_sat, buf)
        _UniffiConverterTypeIBtBolt11Invoice.write(value.bolt11_invoice, buf)
        _UniffiConverterTypeIBtOnchainTransactions.write(value.onchain, buf)
        _UniffiConverterOptionalBool.write(value.is_manually_paid, buf)
        _UniffiConverterOptionalSequenceTypeIManualRefund.write(value.manual_refunds, buf)


class IcJitEntry:
    id: "str"
    state: "CJitStateEnum"
    fee_sat: "int"
    network_fee_sat: "int"
    service_fee_sat: "int"
    channel_size_sat: "int"
    channel_expiry_weeks: "int"
    channel_open_error: "typing.Optional[str]"
    node_id: "str"
    invoice: "IBtBolt11Invoice"
    channel: "typing.Optional[IBtChannel]"
    lsp_node: "ILspNode"
    coupon_code: "str"
    source: "typing.Optional[str]"
    discount: "typing.Optional[IDiscount]"
    expires_at: "str"
    updated_at: "str"
    created_at: "str"
    @typing.no_type_check
    def __init__(self, *, id: "str", state: "CJitStateEnum", fee_sat: "int", network_fee_sat: "int", service_fee_sat: "int", channel_size_sat: "int", channel_expiry_weeks: "int", channel_open_error: "typing.Optional[str]", node_id: "str", invoice: "IBtBolt11Invoice", channel: "typing.Optional[IBtChannel]", lsp_node: "ILspNode", coupon_code: "str", source: "typing.Optional[str]", discount: "typing.Optional[IDiscount]", expires_at: "str", updated_at: "str", created_at: "str"):
        self.id = id
        self.state = state
        self.fee_sat = fee_sat
        self.network_fee_sat = network_fee_sat
        self.service_fee_sat = service_fee_sat
        self.channel_size_sat = channel_size_sat
        self.channel_expiry_weeks = channel_expiry_weeks
        self.channel_open_error = channel_open_error
        self.node_id = node_id
        self.invoice = invoice
        self.channel = channel
        self.lsp_node = lsp_node
        self.coupon_code = coupon_code
        self.source = source
        self.discount = discount
        self.expires_at = expires_at
        self.updated_at = updated_at
        self.created_at = created_at

    def __str__(self):
        return "IcJitEntry(id={}, state={}, fee_sat={}, network_fee_sat={}, service_fee_sat={}, channel_size_sat={}, channel_expiry_weeks={}, channel_open_error={}, node_id={}, invoice={}, channel={}, lsp_node={}, coupon_code={}, source={}, discount={}, expires_at={}, updated_at={}, created_at={})".format(self.id, self.state, self.fee_sat, self.network_fee_sat, self.service_fee_sat, self.channel_size_sat, self.channel_expiry_weeks, self.channel_open_error, self.node_id, self.invoice, self.channel, self.lsp_node, self.coupon_code, self.source, self.discount, self.expires_at, self.updated_at, self.created_at)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.state != other.state:
            return False
        if self.fee_sat != other.fee_sat:
            return False
        if self.network_fee_sat != other.network_fee_sat:
            return False
        if self.service_fee_sat != other.service_fee_sat:
            return False
        if self.channel_size_sat != other.channel_size_sat:
            return False
        if self.channel_expiry_weeks != other.channel_expiry_weeks:
            return False
        if self.channel_open_error != other.channel_open_error:
            return False
        if self.node_id != other.node_id:
            return False
        if self.invoice != other.invoice:
            return False
        if self.channel != other.channel:
            return False
        if self.lsp_node != other.lsp_node:
            return False
        if self.coupon_code != other.coupon_code:
            return False
        if self.source != other.source:
            return False
        if self.discount != other.discount:
            return False
        if self.expires_at != other.expires_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.created_at != other.created_at:
            return False
        return True

class _UniffiConverterTypeICJitEntry(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IcJitEntry(
            id=_UniffiConverterString.read(buf),
            state=_UniffiConverterTypeCJitStateEnum.read(buf),
            fee_sat=_UniffiConverterUInt64.read(buf),
            network_fee_sat=_UniffiConverterUInt64.read(buf),
            service_fee_sat=_UniffiConverterUInt64.read(buf),
            channel_size_sat=_UniffiConverterUInt64.read(buf),
            channel_expiry_weeks=_UniffiConverterUInt32.read(buf),
            channel_open_error=_UniffiConverterOptionalString.read(buf),
            node_id=_UniffiConverterString.read(buf),
            invoice=_UniffiConverterTypeIBtBolt11Invoice.read(buf),
            channel=_UniffiConverterOptionalTypeIBtChannel.read(buf),
            lsp_node=_UniffiConverterTypeILspNode.read(buf),
            coupon_code=_UniffiConverterString.read(buf),
            source=_UniffiConverterOptionalString.read(buf),
            discount=_UniffiConverterOptionalTypeIDiscount.read(buf),
            expires_at=_UniffiConverterString.read(buf),
            updated_at=_UniffiConverterString.read(buf),
            created_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypeCJitStateEnum.check_lower(value.state)
        _UniffiConverterUInt64.check_lower(value.fee_sat)
        _UniffiConverterUInt64.check_lower(value.network_fee_sat)
        _UniffiConverterUInt64.check_lower(value.service_fee_sat)
        _UniffiConverterUInt64.check_lower(value.channel_size_sat)
        _UniffiConverterUInt32.check_lower(value.channel_expiry_weeks)
        _UniffiConverterOptionalString.check_lower(value.channel_open_error)
        _UniffiConverterString.check_lower(value.node_id)
        _UniffiConverterTypeIBtBolt11Invoice.check_lower(value.invoice)
        _UniffiConverterOptionalTypeIBtChannel.check_lower(value.channel)
        _UniffiConverterTypeILspNode.check_lower(value.lsp_node)
        _UniffiConverterString.check_lower(value.coupon_code)
        _UniffiConverterOptionalString.check_lower(value.source)
        _UniffiConverterOptionalTypeIDiscount.check_lower(value.discount)
        _UniffiConverterString.check_lower(value.expires_at)
        _UniffiConverterString.check_lower(value.updated_at)
        _UniffiConverterString.check_lower(value.created_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypeCJitStateEnum.write(value.state, buf)
        _UniffiConverterUInt64.write(value.fee_sat, buf)
        _UniffiConverterUInt64.write(value.network_fee_sat, buf)
        _UniffiConverterUInt64.write(value.service_fee_sat, buf)
        _UniffiConverterUInt64.write(value.channel_size_sat, buf)
        _UniffiConverterUInt32.write(value.channel_expiry_weeks, buf)
        _UniffiConverterOptionalString.write(value.channel_open_error, buf)
        _UniffiConverterString.write(value.node_id, buf)
        _UniffiConverterTypeIBtBolt11Invoice.write(value.invoice, buf)
        _UniffiConverterOptionalTypeIBtChannel.write(value.channel, buf)
        _UniffiConverterTypeILspNode.write(value.lsp_node, buf)
        _UniffiConverterString.write(value.coupon_code, buf)
        _UniffiConverterOptionalString.write(value.source, buf)
        _UniffiConverterOptionalTypeIDiscount.write(value.discount, buf)
        _UniffiConverterString.write(value.expires_at, buf)
        _UniffiConverterString.write(value.updated_at, buf)
        _UniffiConverterString.write(value.created_at, buf)


class IDiscount:
    code: "str"
    absolute_sat: "int"
    relative: "float"
    overall_sat: "int"
    @typing.no_type_check
    def __init__(self, *, code: "str", absolute_sat: "int", relative: "float", overall_sat: "int"):
        self.code = code
        self.absolute_sat = absolute_sat
        self.relative = relative
        self.overall_sat = overall_sat

    def __str__(self):
        return "IDiscount(code={}, absolute_sat={}, relative={}, overall_sat={})".format(self.code, self.absolute_sat, self.relative, self.overall_sat)

    def __eq__(self, other):
        if self.code != other.code:
            return False
        if self.absolute_sat != other.absolute_sat:
            return False
        if self.relative != other.relative:
            return False
        if self.overall_sat != other.overall_sat:
            return False
        return True

class _UniffiConverterTypeIDiscount(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IDiscount(
            code=_UniffiConverterString.read(buf),
            absolute_sat=_UniffiConverterUInt64.read(buf),
            relative=_UniffiConverterDouble.read(buf),
            overall_sat=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.code)
        _UniffiConverterUInt64.check_lower(value.absolute_sat)
        _UniffiConverterDouble.check_lower(value.relative)
        _UniffiConverterUInt64.check_lower(value.overall_sat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.code, buf)
        _UniffiConverterUInt64.write(value.absolute_sat, buf)
        _UniffiConverterDouble.write(value.relative, buf)
        _UniffiConverterUInt64.write(value.overall_sat, buf)


class ILspNode:
    alias: "str"
    pubkey: "str"
    connection_strings: "typing.List[str]"
    readonly: "typing.Optional[bool]"
    @typing.no_type_check
    def __init__(self, *, alias: "str", pubkey: "str", connection_strings: "typing.List[str]", readonly: "typing.Optional[bool]"):
        self.alias = alias
        self.pubkey = pubkey
        self.connection_strings = connection_strings
        self.readonly = readonly

    def __str__(self):
        return "ILspNode(alias={}, pubkey={}, connection_strings={}, readonly={})".format(self.alias, self.pubkey, self.connection_strings, self.readonly)

    def __eq__(self, other):
        if self.alias != other.alias:
            return False
        if self.pubkey != other.pubkey:
            return False
        if self.connection_strings != other.connection_strings:
            return False
        if self.readonly != other.readonly:
            return False
        return True

class _UniffiConverterTypeILspNode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ILspNode(
            alias=_UniffiConverterString.read(buf),
            pubkey=_UniffiConverterString.read(buf),
            connection_strings=_UniffiConverterSequenceString.read(buf),
            readonly=_UniffiConverterOptionalBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.alias)
        _UniffiConverterString.check_lower(value.pubkey)
        _UniffiConverterSequenceString.check_lower(value.connection_strings)
        _UniffiConverterOptionalBool.check_lower(value.readonly)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.alias, buf)
        _UniffiConverterString.write(value.pubkey, buf)
        _UniffiConverterSequenceString.write(value.connection_strings, buf)
        _UniffiConverterOptionalBool.write(value.readonly, buf)


class IManualRefund:
    amount_sat: "int"
    target: "str"
    state: "ManualRefundStateEnum"
    created_by_name: "str"
    voted_by_name: "typing.Optional[str]"
    reason: "typing.Optional[str]"
    target_type: "str"
    @typing.no_type_check
    def __init__(self, *, amount_sat: "int", target: "str", state: "ManualRefundStateEnum", created_by_name: "str", voted_by_name: "typing.Optional[str]", reason: "typing.Optional[str]", target_type: "str"):
        self.amount_sat = amount_sat
        self.target = target
        self.state = state
        self.created_by_name = created_by_name
        self.voted_by_name = voted_by_name
        self.reason = reason
        self.target_type = target_type

    def __str__(self):
        return "IManualRefund(amount_sat={}, target={}, state={}, created_by_name={}, voted_by_name={}, reason={}, target_type={})".format(self.amount_sat, self.target, self.state, self.created_by_name, self.voted_by_name, self.reason, self.target_type)

    def __eq__(self, other):
        if self.amount_sat != other.amount_sat:
            return False
        if self.target != other.target:
            return False
        if self.state != other.state:
            return False
        if self.created_by_name != other.created_by_name:
            return False
        if self.voted_by_name != other.voted_by_name:
            return False
        if self.reason != other.reason:
            return False
        if self.target_type != other.target_type:
            return False
        return True

class _UniffiConverterTypeIManualRefund(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return IManualRefund(
            amount_sat=_UniffiConverterUInt64.read(buf),
            target=_UniffiConverterString.read(buf),
            state=_UniffiConverterTypeManualRefundStateEnum.read(buf),
            created_by_name=_UniffiConverterString.read(buf),
            voted_by_name=_UniffiConverterOptionalString.read(buf),
            reason=_UniffiConverterOptionalString.read(buf),
            target_type=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.amount_sat)
        _UniffiConverterString.check_lower(value.target)
        _UniffiConverterTypeManualRefundStateEnum.check_lower(value.state)
        _UniffiConverterString.check_lower(value.created_by_name)
        _UniffiConverterOptionalString.check_lower(value.voted_by_name)
        _UniffiConverterOptionalString.check_lower(value.reason)
        _UniffiConverterString.check_lower(value.target_type)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.amount_sat, buf)
        _UniffiConverterString.write(value.target, buf)
        _UniffiConverterTypeManualRefundStateEnum.write(value.state, buf)
        _UniffiConverterString.write(value.created_by_name, buf)
        _UniffiConverterOptionalString.write(value.voted_by_name, buf)
        _UniffiConverterOptionalString.write(value.reason, buf)
        _UniffiConverterString.write(value.target_type, buf)


class LightningActivity:
    id: "str"
    tx_type: "PaymentType"
    status: "PaymentState"
    value: "int"
    fee: "typing.Optional[int]"
    invoice: "str"
    message: "str"
    timestamp: "int"
    preimage: "typing.Optional[str]"
    created_at: "typing.Optional[int]"
    updated_at: "typing.Optional[int]"
    @typing.no_type_check
    def __init__(self, *, id: "str", tx_type: "PaymentType", status: "PaymentState", value: "int", fee: "typing.Optional[int]", invoice: "str", message: "str", timestamp: "int", preimage: "typing.Optional[str]", created_at: "typing.Optional[int]", updated_at: "typing.Optional[int]"):
        self.id = id
        self.tx_type = tx_type
        self.status = status
        self.value = value
        self.fee = fee
        self.invoice = invoice
        self.message = message
        self.timestamp = timestamp
        self.preimage = preimage
        self.created_at = created_at
        self.updated_at = updated_at

    def __str__(self):
        return "LightningActivity(id={}, tx_type={}, status={}, value={}, fee={}, invoice={}, message={}, timestamp={}, preimage={}, created_at={}, updated_at={})".format(self.id, self.tx_type, self.status, self.value, self.fee, self.invoice, self.message, self.timestamp, self.preimage, self.created_at, self.updated_at)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.tx_type != other.tx_type:
            return False
        if self.status != other.status:
            return False
        if self.value != other.value:
            return False
        if self.fee != other.fee:
            return False
        if self.invoice != other.invoice:
            return False
        if self.message != other.message:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.preimage != other.preimage:
            return False
        if self.created_at != other.created_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class _UniffiConverterTypeLightningActivity(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LightningActivity(
            id=_UniffiConverterString.read(buf),
            tx_type=_UniffiConverterTypePaymentType.read(buf),
            status=_UniffiConverterTypePaymentState.read(buf),
            value=_UniffiConverterUInt64.read(buf),
            fee=_UniffiConverterOptionalUInt64.read(buf),
            invoice=_UniffiConverterString.read(buf),
            message=_UniffiConverterString.read(buf),
            timestamp=_UniffiConverterUInt64.read(buf),
            preimage=_UniffiConverterOptionalString.read(buf),
            created_at=_UniffiConverterOptionalUInt64.read(buf),
            updated_at=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypePaymentType.check_lower(value.tx_type)
        _UniffiConverterTypePaymentState.check_lower(value.status)
        _UniffiConverterUInt64.check_lower(value.value)
        _UniffiConverterOptionalUInt64.check_lower(value.fee)
        _UniffiConverterString.check_lower(value.invoice)
        _UniffiConverterString.check_lower(value.message)
        _UniffiConverterUInt64.check_lower(value.timestamp)
        _UniffiConverterOptionalString.check_lower(value.preimage)
        _UniffiConverterOptionalUInt64.check_lower(value.created_at)
        _UniffiConverterOptionalUInt64.check_lower(value.updated_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypePaymentType.write(value.tx_type, buf)
        _UniffiConverterTypePaymentState.write(value.status, buf)
        _UniffiConverterUInt64.write(value.value, buf)
        _UniffiConverterOptionalUInt64.write(value.fee, buf)
        _UniffiConverterString.write(value.invoice, buf)
        _UniffiConverterString.write(value.message, buf)
        _UniffiConverterUInt64.write(value.timestamp, buf)
        _UniffiConverterOptionalString.write(value.preimage, buf)
        _UniffiConverterOptionalUInt64.write(value.created_at, buf)
        _UniffiConverterOptionalUInt64.write(value.updated_at, buf)


class LightningInvoice:
    bolt11: "str"
    payment_hash: "bytes"
    amount_satoshis: "int"
    timestamp_seconds: "int"
    expiry_seconds: "int"
    is_expired: "bool"
    description: "typing.Optional[str]"
    network_type: "NetworkType"
    payee_node_id: "typing.Optional[bytes]"
    @typing.no_type_check
    def __init__(self, *, bolt11: "str", payment_hash: "bytes", amount_satoshis: "int", timestamp_seconds: "int", expiry_seconds: "int", is_expired: "bool", description: "typing.Optional[str]", network_type: "NetworkType", payee_node_id: "typing.Optional[bytes]"):
        self.bolt11 = bolt11
        self.payment_hash = payment_hash
        self.amount_satoshis = amount_satoshis
        self.timestamp_seconds = timestamp_seconds
        self.expiry_seconds = expiry_seconds
        self.is_expired = is_expired
        self.description = description
        self.network_type = network_type
        self.payee_node_id = payee_node_id

    def __str__(self):
        return "LightningInvoice(bolt11={}, payment_hash={}, amount_satoshis={}, timestamp_seconds={}, expiry_seconds={}, is_expired={}, description={}, network_type={}, payee_node_id={})".format(self.bolt11, self.payment_hash, self.amount_satoshis, self.timestamp_seconds, self.expiry_seconds, self.is_expired, self.description, self.network_type, self.payee_node_id)

    def __eq__(self, other):
        if self.bolt11 != other.bolt11:
            return False
        if self.payment_hash != other.payment_hash:
            return False
        if self.amount_satoshis != other.amount_satoshis:
            return False
        if self.timestamp_seconds != other.timestamp_seconds:
            return False
        if self.expiry_seconds != other.expiry_seconds:
            return False
        if self.is_expired != other.is_expired:
            return False
        if self.description != other.description:
            return False
        if self.network_type != other.network_type:
            return False
        if self.payee_node_id != other.payee_node_id:
            return False
        return True

class _UniffiConverterTypeLightningInvoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LightningInvoice(
            bolt11=_UniffiConverterString.read(buf),
            payment_hash=_UniffiConverterBytes.read(buf),
            amount_satoshis=_UniffiConverterUInt64.read(buf),
            timestamp_seconds=_UniffiConverterUInt64.read(buf),
            expiry_seconds=_UniffiConverterUInt64.read(buf),
            is_expired=_UniffiConverterBool.read(buf),
            description=_UniffiConverterOptionalString.read(buf),
            network_type=_UniffiConverterTypeNetworkType.read(buf),
            payee_node_id=_UniffiConverterOptionalBytes.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.bolt11)
        _UniffiConverterBytes.check_lower(value.payment_hash)
        _UniffiConverterUInt64.check_lower(value.amount_satoshis)
        _UniffiConverterUInt64.check_lower(value.timestamp_seconds)
        _UniffiConverterUInt64.check_lower(value.expiry_seconds)
        _UniffiConverterBool.check_lower(value.is_expired)
        _UniffiConverterOptionalString.check_lower(value.description)
        _UniffiConverterTypeNetworkType.check_lower(value.network_type)
        _UniffiConverterOptionalBytes.check_lower(value.payee_node_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.bolt11, buf)
        _UniffiConverterBytes.write(value.payment_hash, buf)
        _UniffiConverterUInt64.write(value.amount_satoshis, buf)
        _UniffiConverterUInt64.write(value.timestamp_seconds, buf)
        _UniffiConverterUInt64.write(value.expiry_seconds, buf)
        _UniffiConverterBool.write(value.is_expired, buf)
        _UniffiConverterOptionalString.write(value.description, buf)
        _UniffiConverterTypeNetworkType.write(value.network_type, buf)
        _UniffiConverterOptionalBytes.write(value.payee_node_id, buf)


class LnurlAddressData:
    uri: "str"
    domain: "str"
    username: "str"
    @typing.no_type_check
    def __init__(self, *, uri: "str", domain: "str", username: "str"):
        self.uri = uri
        self.domain = domain
        self.username = username

    def __str__(self):
        return "LnurlAddressData(uri={}, domain={}, username={})".format(self.uri, self.domain, self.username)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.domain != other.domain:
            return False
        if self.username != other.username:
            return False
        return True

class _UniffiConverterTypeLnurlAddressData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlAddressData(
            uri=_UniffiConverterString.read(buf),
            domain=_UniffiConverterString.read(buf),
            username=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterString.check_lower(value.domain)
        _UniffiConverterString.check_lower(value.username)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.domain, buf)
        _UniffiConverterString.write(value.username, buf)


class LnurlAuthData:
    uri: "str"
    tag: "str"
    k1: "str"
    @typing.no_type_check
    def __init__(self, *, uri: "str", tag: "str", k1: "str"):
        self.uri = uri
        self.tag = tag
        self.k1 = k1

    def __str__(self):
        return "LnurlAuthData(uri={}, tag={}, k1={})".format(self.uri, self.tag, self.k1)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.tag != other.tag:
            return False
        if self.k1 != other.k1:
            return False
        return True

class _UniffiConverterTypeLnurlAuthData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlAuthData(
            uri=_UniffiConverterString.read(buf),
            tag=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterString.check_lower(value.tag)
        _UniffiConverterString.check_lower(value.k1)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.tag, buf)
        _UniffiConverterString.write(value.k1, buf)


class LnurlChannelData:
    uri: "str"
    callback: "str"
    k1: "str"
    tag: "str"
    @typing.no_type_check
    def __init__(self, *, uri: "str", callback: "str", k1: "str", tag: "str"):
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.tag = tag

    def __str__(self):
        return "LnurlChannelData(uri={}, callback={}, k1={}, tag={})".format(self.uri, self.callback, self.k1, self.tag)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.k1 != other.k1:
            return False
        if self.tag != other.tag:
            return False
        return True

class _UniffiConverterTypeLnurlChannelData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlChannelData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
            tag=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterString.check_lower(value.callback)
        _UniffiConverterString.check_lower(value.k1)
        _UniffiConverterString.check_lower(value.tag)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterString.write(value.k1, buf)
        _UniffiConverterString.write(value.tag, buf)


class LnurlPayData:
    uri: "str"
    callback: "str"
    min_sendable: "int"
    max_sendable: "int"
    metadata_str: "str"
    comment_allowed: "typing.Optional[int]"
    allows_nostr: "bool"
    nostr_pubkey: "typing.Optional[bytes]"
    @typing.no_type_check
    def __init__(self, *, uri: "str", callback: "str", min_sendable: "int", max_sendable: "int", metadata_str: "str", comment_allowed: "typing.Optional[int]", allows_nostr: "bool", nostr_pubkey: "typing.Optional[bytes]"):
        self.uri = uri
        self.callback = callback
        self.min_sendable = min_sendable
        self.max_sendable = max_sendable
        self.metadata_str = metadata_str
        self.comment_allowed = comment_allowed
        self.allows_nostr = allows_nostr
        self.nostr_pubkey = nostr_pubkey

    def __str__(self):
        return "LnurlPayData(uri={}, callback={}, min_sendable={}, max_sendable={}, metadata_str={}, comment_allowed={}, allows_nostr={}, nostr_pubkey={})".format(self.uri, self.callback, self.min_sendable, self.max_sendable, self.metadata_str, self.comment_allowed, self.allows_nostr, self.nostr_pubkey)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.min_sendable != other.min_sendable:
            return False
        if self.max_sendable != other.max_sendable:
            return False
        if self.metadata_str != other.metadata_str:
            return False
        if self.comment_allowed != other.comment_allowed:
            return False
        if self.allows_nostr != other.allows_nostr:
            return False
        if self.nostr_pubkey != other.nostr_pubkey:
            return False
        return True

class _UniffiConverterTypeLnurlPayData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlPayData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            min_sendable=_UniffiConverterUInt64.read(buf),
            max_sendable=_UniffiConverterUInt64.read(buf),
            metadata_str=_UniffiConverterString.read(buf),
            comment_allowed=_UniffiConverterOptionalUInt32.read(buf),
            allows_nostr=_UniffiConverterBool.read(buf),
            nostr_pubkey=_UniffiConverterOptionalBytes.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterString.check_lower(value.callback)
        _UniffiConverterUInt64.check_lower(value.min_sendable)
        _UniffiConverterUInt64.check_lower(value.max_sendable)
        _UniffiConverterString.check_lower(value.metadata_str)
        _UniffiConverterOptionalUInt32.check_lower(value.comment_allowed)
        _UniffiConverterBool.check_lower(value.allows_nostr)
        _UniffiConverterOptionalBytes.check_lower(value.nostr_pubkey)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterUInt64.write(value.min_sendable, buf)
        _UniffiConverterUInt64.write(value.max_sendable, buf)
        _UniffiConverterString.write(value.metadata_str, buf)
        _UniffiConverterOptionalUInt32.write(value.comment_allowed, buf)
        _UniffiConverterBool.write(value.allows_nostr, buf)
        _UniffiConverterOptionalBytes.write(value.nostr_pubkey, buf)


class LnurlWithdrawData:
    uri: "str"
    callback: "str"
    k1: "str"
    default_description: "str"
    min_withdrawable: "typing.Optional[int]"
    max_withdrawable: "int"
    tag: "str"
    @typing.no_type_check
    def __init__(self, *, uri: "str", callback: "str", k1: "str", default_description: "str", min_withdrawable: "typing.Optional[int]", max_withdrawable: "int", tag: "str"):
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.default_description = default_description
        self.min_withdrawable = min_withdrawable
        self.max_withdrawable = max_withdrawable
        self.tag = tag

    def __str__(self):
        return "LnurlWithdrawData(uri={}, callback={}, k1={}, default_description={}, min_withdrawable={}, max_withdrawable={}, tag={})".format(self.uri, self.callback, self.k1, self.default_description, self.min_withdrawable, self.max_withdrawable, self.tag)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.k1 != other.k1:
            return False
        if self.default_description != other.default_description:
            return False
        if self.min_withdrawable != other.min_withdrawable:
            return False
        if self.max_withdrawable != other.max_withdrawable:
            return False
        if self.tag != other.tag:
            return False
        return True

class _UniffiConverterTypeLnurlWithdrawData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlWithdrawData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
            default_description=_UniffiConverterString.read(buf),
            min_withdrawable=_UniffiConverterOptionalUInt64.read(buf),
            max_withdrawable=_UniffiConverterUInt64.read(buf),
            tag=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterString.check_lower(value.callback)
        _UniffiConverterString.check_lower(value.k1)
        _UniffiConverterString.check_lower(value.default_description)
        _UniffiConverterOptionalUInt64.check_lower(value.min_withdrawable)
        _UniffiConverterUInt64.check_lower(value.max_withdrawable)
        _UniffiConverterString.check_lower(value.tag)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterString.write(value.k1, buf)
        _UniffiConverterString.write(value.default_description, buf)
        _UniffiConverterOptionalUInt64.write(value.min_withdrawable, buf)
        _UniffiConverterUInt64.write(value.max_withdrawable, buf)
        _UniffiConverterString.write(value.tag, buf)


class OnChainInvoice:
    address: "str"
    amount_satoshis: "int"
    label: "typing.Optional[str]"
    message: "typing.Optional[str]"
    params: "typing.Optional[dict[str, str]]"
    @typing.no_type_check
    def __init__(self, *, address: "str", amount_satoshis: "int", label: "typing.Optional[str]", message: "typing.Optional[str]", params: "typing.Optional[dict[str, str]]"):
        self.address = address
        self.amount_satoshis = amount_satoshis
        self.label = label
        self.message = message
        self.params = params

    def __str__(self):
        return "OnChainInvoice(address={}, amount_satoshis={}, label={}, message={}, params={})".format(self.address, self.amount_satoshis, self.label, self.message, self.params)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.amount_satoshis != other.amount_satoshis:
            return False
        if self.label != other.label:
            return False
        if self.message != other.message:
            return False
        if self.params != other.params:
            return False
        return True

class _UniffiConverterTypeOnChainInvoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return OnChainInvoice(
            address=_UniffiConverterString.read(buf),
            amount_satoshis=_UniffiConverterUInt64.read(buf),
            label=_UniffiConverterOptionalString.read(buf),
            message=_UniffiConverterOptionalString.read(buf),
            params=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterUInt64.check_lower(value.amount_satoshis)
        _UniffiConverterOptionalString.check_lower(value.label)
        _UniffiConverterOptionalString.check_lower(value.message)
        _UniffiConverterOptionalMapStringString.check_lower(value.params)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterUInt64.write(value.amount_satoshis, buf)
        _UniffiConverterOptionalString.write(value.label, buf)
        _UniffiConverterOptionalString.write(value.message, buf)
        _UniffiConverterOptionalMapStringString.write(value.params, buf)


class OnchainActivity:
    id: "str"
    tx_type: "PaymentType"
    tx_id: "str"
    value: "int"
    fee: "int"
    fee_rate: "int"
    address: "str"
    confirmed: "bool"
    timestamp: "int"
    is_boosted: "bool"
    is_transfer: "bool"
    does_exist: "bool"
    confirm_timestamp: "typing.Optional[int]"
    channel_id: "typing.Optional[str]"
    transfer_tx_id: "typing.Optional[str]"
    created_at: "typing.Optional[int]"
    updated_at: "typing.Optional[int]"
    @typing.no_type_check
    def __init__(self, *, id: "str", tx_type: "PaymentType", tx_id: "str", value: "int", fee: "int", fee_rate: "int", address: "str", confirmed: "bool", timestamp: "int", is_boosted: "bool", is_transfer: "bool", does_exist: "bool", confirm_timestamp: "typing.Optional[int]", channel_id: "typing.Optional[str]", transfer_tx_id: "typing.Optional[str]", created_at: "typing.Optional[int]", updated_at: "typing.Optional[int]"):
        self.id = id
        self.tx_type = tx_type
        self.tx_id = tx_id
        self.value = value
        self.fee = fee
        self.fee_rate = fee_rate
        self.address = address
        self.confirmed = confirmed
        self.timestamp = timestamp
        self.is_boosted = is_boosted
        self.is_transfer = is_transfer
        self.does_exist = does_exist
        self.confirm_timestamp = confirm_timestamp
        self.channel_id = channel_id
        self.transfer_tx_id = transfer_tx_id
        self.created_at = created_at
        self.updated_at = updated_at

    def __str__(self):
        return "OnchainActivity(id={}, tx_type={}, tx_id={}, value={}, fee={}, fee_rate={}, address={}, confirmed={}, timestamp={}, is_boosted={}, is_transfer={}, does_exist={}, confirm_timestamp={}, channel_id={}, transfer_tx_id={}, created_at={}, updated_at={})".format(self.id, self.tx_type, self.tx_id, self.value, self.fee, self.fee_rate, self.address, self.confirmed, self.timestamp, self.is_boosted, self.is_transfer, self.does_exist, self.confirm_timestamp, self.channel_id, self.transfer_tx_id, self.created_at, self.updated_at)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.tx_type != other.tx_type:
            return False
        if self.tx_id != other.tx_id:
            return False
        if self.value != other.value:
            return False
        if self.fee != other.fee:
            return False
        if self.fee_rate != other.fee_rate:
            return False
        if self.address != other.address:
            return False
        if self.confirmed != other.confirmed:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.is_boosted != other.is_boosted:
            return False
        if self.is_transfer != other.is_transfer:
            return False
        if self.does_exist != other.does_exist:
            return False
        if self.confirm_timestamp != other.confirm_timestamp:
            return False
        if self.channel_id != other.channel_id:
            return False
        if self.transfer_tx_id != other.transfer_tx_id:
            return False
        if self.created_at != other.created_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class _UniffiConverterTypeOnchainActivity(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return OnchainActivity(
            id=_UniffiConverterString.read(buf),
            tx_type=_UniffiConverterTypePaymentType.read(buf),
            tx_id=_UniffiConverterString.read(buf),
            value=_UniffiConverterUInt64.read(buf),
            fee=_UniffiConverterUInt64.read(buf),
            fee_rate=_UniffiConverterUInt64.read(buf),
            address=_UniffiConverterString.read(buf),
            confirmed=_UniffiConverterBool.read(buf),
            timestamp=_UniffiConverterUInt64.read(buf),
            is_boosted=_UniffiConverterBool.read(buf),
            is_transfer=_UniffiConverterBool.read(buf),
            does_exist=_UniffiConverterBool.read(buf),
            confirm_timestamp=_UniffiConverterOptionalUInt64.read(buf),
            channel_id=_UniffiConverterOptionalString.read(buf),
            transfer_tx_id=_UniffiConverterOptionalString.read(buf),
            created_at=_UniffiConverterOptionalUInt64.read(buf),
            updated_at=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypePaymentType.check_lower(value.tx_type)
        _UniffiConverterString.check_lower(value.tx_id)
        _UniffiConverterUInt64.check_lower(value.value)
        _UniffiConverterUInt64.check_lower(value.fee)
        _UniffiConverterUInt64.check_lower(value.fee_rate)
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterBool.check_lower(value.confirmed)
        _UniffiConverterUInt64.check_lower(value.timestamp)
        _UniffiConverterBool.check_lower(value.is_boosted)
        _UniffiConverterBool.check_lower(value.is_transfer)
        _UniffiConverterBool.check_lower(value.does_exist)
        _UniffiConverterOptionalUInt64.check_lower(value.confirm_timestamp)
        _UniffiConverterOptionalString.check_lower(value.channel_id)
        _UniffiConverterOptionalString.check_lower(value.transfer_tx_id)
        _UniffiConverterOptionalUInt64.check_lower(value.created_at)
        _UniffiConverterOptionalUInt64.check_lower(value.updated_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypePaymentType.write(value.tx_type, buf)
        _UniffiConverterString.write(value.tx_id, buf)
        _UniffiConverterUInt64.write(value.value, buf)
        _UniffiConverterUInt64.write(value.fee, buf)
        _UniffiConverterUInt64.write(value.fee_rate, buf)
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterBool.write(value.confirmed, buf)
        _UniffiConverterUInt64.write(value.timestamp, buf)
        _UniffiConverterBool.write(value.is_boosted, buf)
        _UniffiConverterBool.write(value.is_transfer, buf)
        _UniffiConverterBool.write(value.does_exist, buf)
        _UniffiConverterOptionalUInt64.write(value.confirm_timestamp, buf)
        _UniffiConverterOptionalString.write(value.channel_id, buf)
        _UniffiConverterOptionalString.write(value.transfer_tx_id, buf)
        _UniffiConverterOptionalUInt64.write(value.created_at, buf)
        _UniffiConverterOptionalUInt64.write(value.updated_at, buf)


class PubkyAuth:
    data: "str"
    @typing.no_type_check
    def __init__(self, *, data: "str"):
        self.data = data

    def __str__(self):
        return "PubkyAuth(data={})".format(self.data)

    def __eq__(self, other):
        if self.data != other.data:
            return False
        return True

class _UniffiConverterTypePubkyAuth(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PubkyAuth(
            data=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.data)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.data, buf)


class ValidationResult:
    address: "str"
    network: "NetworkType"
    address_type: "AddressType"
    @typing.no_type_check
    def __init__(self, *, address: "str", network: "NetworkType", address_type: "AddressType"):
        self.address = address
        self.network = network
        self.address_type = address_type

    def __str__(self):
        return "ValidationResult(address={}, network={}, address_type={})".format(self.address, self.network, self.address_type)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.network != other.network:
            return False
        if self.address_type != other.address_type:
            return False
        return True

class _UniffiConverterTypeValidationResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ValidationResult(
            address=_UniffiConverterString.read(buf),
            network=_UniffiConverterTypeNetworkType.read(buf),
            address_type=_UniffiConverterTypeAddressType.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterTypeNetworkType.check_lower(value.network)
        _UniffiConverterTypeAddressType.check_lower(value.address_type)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterTypeNetworkType.write(value.network, buf)
        _UniffiConverterTypeAddressType.write(value.address_type, buf)





class Activity:
    def __init__(self):
        raise RuntimeError("Activity cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class ONCHAIN:
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected a tuple of len 1, found len {len(values)}")
            if not isinstance(values[0], OnchainActivity):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'OnchainActivity', got '{type(values[0])}'")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"Activity.ONCHAIN{self._values!r}"

        def __eq__(self, other):
            if not other.is_onchain():
                return False
            return self._values == other._values
    class LIGHTNING:
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected a tuple of len 1, found len {len(values)}")
            if not isinstance(values[0], LightningActivity):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'LightningActivity', got '{type(values[0])}'")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"Activity.LIGHTNING{self._values!r}"

        def __eq__(self, other):
            if not other.is_lightning():
                return False
            return self._values == other._values
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_onchain(self) -> bool:
        return isinstance(self, Activity.ONCHAIN)
    def is_lightning(self) -> bool:
        return isinstance(self, Activity.LIGHTNING)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Activity.ONCHAIN = type("Activity.ONCHAIN", (Activity.ONCHAIN, Activity,), {})  # type: ignore
Activity.LIGHTNING = type("Activity.LIGHTNING", (Activity.LIGHTNING, Activity,), {})  # type: ignore




class _UniffiConverterTypeActivity(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Activity.ONCHAIN(
                _UniffiConverterTypeOnchainActivity.read(buf),
            )
        if variant == 2:
            return Activity.LIGHTNING(
                _UniffiConverterTypeLightningActivity.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_onchain():
            _UniffiConverterTypeOnchainActivity.check_lower(value._values[0])
            return
        if value.is_lightning():
            _UniffiConverterTypeLightningActivity.check_lower(value._values[0])
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_onchain():
            buf.write_i32(1)
            _UniffiConverterTypeOnchainActivity.write(value._values[0], buf)
        if value.is_lightning():
            buf.write_i32(2)
            _UniffiConverterTypeLightningActivity.write(value._values[0], buf)




# ActivityError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ActivityError(Exception):
    pass

_UniffiTempActivityError = ActivityError

class ActivityError:  # type: ignore
    class InvalidActivity(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.InvalidActivity({})".format(str(self))
    _UniffiTempActivityError.InvalidActivity = InvalidActivity # type: ignore
    class InitializationError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.InitializationError({})".format(str(self))
    _UniffiTempActivityError.InitializationError = InitializationError # type: ignore
    class InsertError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.InsertError({})".format(str(self))
    _UniffiTempActivityError.InsertError = InsertError # type: ignore
    class RetrievalError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.RetrievalError({})".format(str(self))
    _UniffiTempActivityError.RetrievalError = RetrievalError # type: ignore
    class DataError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.DataError({})".format(str(self))
    _UniffiTempActivityError.DataError = DataError # type: ignore
    class ConnectionError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.ConnectionError({})".format(str(self))
    _UniffiTempActivityError.ConnectionError = ConnectionError # type: ignore
    class SerializationError(_UniffiTempActivityError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "ActivityError.SerializationError({})".format(str(self))
    _UniffiTempActivityError.SerializationError = SerializationError # type: ignore

ActivityError = _UniffiTempActivityError # type: ignore
del _UniffiTempActivityError


class _UniffiConverterTypeActivityError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ActivityError.InvalidActivity(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ActivityError.InitializationError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ActivityError.InsertError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return ActivityError.RetrievalError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return ActivityError.DataError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 6:
            return ActivityError.ConnectionError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 7:
            return ActivityError.SerializationError(
                error_details=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, ActivityError.InvalidActivity):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.InitializationError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.InsertError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.RetrievalError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.DataError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.ConnectionError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, ActivityError.SerializationError):
            _UniffiConverterString.check_lower(value.error_details)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, ActivityError.InvalidActivity):
            buf.write_i32(1)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.InitializationError):
            buf.write_i32(2)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.InsertError):
            buf.write_i32(3)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.RetrievalError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.DataError):
            buf.write_i32(5)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.ConnectionError):
            buf.write_i32(6)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, ActivityError.SerializationError):
            buf.write_i32(7)
            _UniffiConverterString.write(value.error_details, buf)





class ActivityFilter(enum.Enum):
    ALL = 0
    
    LIGHTNING = 1
    
    ONCHAIN = 2
    


class _UniffiConverterTypeActivityFilter(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ActivityFilter.ALL
        if variant == 2:
            return ActivityFilter.LIGHTNING
        if variant == 3:
            return ActivityFilter.ONCHAIN
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ActivityFilter.ALL:
            return
        if value == ActivityFilter.LIGHTNING:
            return
        if value == ActivityFilter.ONCHAIN:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ActivityFilter.ALL:
            buf.write_i32(1)
        if value == ActivityFilter.LIGHTNING:
            buf.write_i32(2)
        if value == ActivityFilter.ONCHAIN:
            buf.write_i32(3)







class ActivityType(enum.Enum):
    ONCHAIN = 0
    
    LIGHTNING = 1
    


class _UniffiConverterTypeActivityType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ActivityType.ONCHAIN
        if variant == 2:
            return ActivityType.LIGHTNING
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ActivityType.ONCHAIN:
            return
        if value == ActivityType.LIGHTNING:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ActivityType.ONCHAIN:
            buf.write_i32(1)
        if value == ActivityType.LIGHTNING:
            buf.write_i32(2)




# AddressError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class AddressError(Exception):
    pass

_UniffiTempAddressError = AddressError

class AddressError:  # type: ignore
    class InvalidAddress(_UniffiTempAddressError):

        def __init__(self):
            pass
        def __repr__(self):
            return "AddressError.InvalidAddress({})".format(str(self))
    _UniffiTempAddressError.InvalidAddress = InvalidAddress # type: ignore
    class InvalidNetwork(_UniffiTempAddressError):

        def __init__(self):
            pass
        def __repr__(self):
            return "AddressError.InvalidNetwork({})".format(str(self))
    _UniffiTempAddressError.InvalidNetwork = InvalidNetwork # type: ignore

AddressError = _UniffiTempAddressError # type: ignore
del _UniffiTempAddressError


class _UniffiConverterTypeAddressError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AddressError.InvalidAddress(
            )
        if variant == 2:
            return AddressError.InvalidNetwork(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, AddressError.InvalidAddress):
            return
        if isinstance(value, AddressError.InvalidNetwork):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, AddressError.InvalidAddress):
            buf.write_i32(1)
        if isinstance(value, AddressError.InvalidNetwork):
            buf.write_i32(2)





class AddressType(enum.Enum):
    P2PKH = 0
    
    P2SH = 1
    
    P2WPKH = 2
    
    P2WSH = 3
    
    P2TR = 4
    
    UNKNOWN = 5
    


class _UniffiConverterTypeAddressType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AddressType.P2PKH
        if variant == 2:
            return AddressType.P2SH
        if variant == 3:
            return AddressType.P2WPKH
        if variant == 4:
            return AddressType.P2WSH
        if variant == 5:
            return AddressType.P2TR
        if variant == 6:
            return AddressType.UNKNOWN
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == AddressType.P2PKH:
            return
        if value == AddressType.P2SH:
            return
        if value == AddressType.P2WPKH:
            return
        if value == AddressType.P2WSH:
            return
        if value == AddressType.P2TR:
            return
        if value == AddressType.UNKNOWN:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == AddressType.P2PKH:
            buf.write_i32(1)
        if value == AddressType.P2SH:
            buf.write_i32(2)
        if value == AddressType.P2WPKH:
            buf.write_i32(3)
        if value == AddressType.P2WSH:
            buf.write_i32(4)
        if value == AddressType.P2TR:
            buf.write_i32(5)
        if value == AddressType.UNKNOWN:
            buf.write_i32(6)







class BitcoinNetworkEnum(enum.Enum):
    MAINNET = 0
    
    TESTNET = 1
    
    SIGNET = 2
    
    REGTEST = 3
    


class _UniffiConverterTypeBitcoinNetworkEnum(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BitcoinNetworkEnum.MAINNET
        if variant == 2:
            return BitcoinNetworkEnum.TESTNET
        if variant == 3:
            return BitcoinNetworkEnum.SIGNET
        if variant == 4:
            return BitcoinNetworkEnum.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BitcoinNetworkEnum.MAINNET:
            return
        if value == BitcoinNetworkEnum.TESTNET:
            return
        if value == BitcoinNetworkEnum.SIGNET:
            return
        if value == BitcoinNetworkEnum.REGTEST:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BitcoinNetworkEnum.MAINNET:
            buf.write_i32(1)
        if value == BitcoinNetworkEnum.TESTNET:
            buf.write_i32(2)
        if value == BitcoinNetworkEnum.SIGNET:
            buf.write_i32(3)
        if value == BitcoinNetworkEnum.REGTEST:
            buf.write_i32(4)




# BlocktankError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class BlocktankError(Exception):
    pass

_UniffiTempBlocktankError = BlocktankError

class BlocktankError:  # type: ignore
    class HttpClient(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.HttpClient({})".format(str(self))
    _UniffiTempBlocktankError.HttpClient = HttpClient # type: ignore
    class BlocktankClient(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.BlocktankClient({})".format(str(self))
    _UniffiTempBlocktankError.BlocktankClient = BlocktankClient # type: ignore
    class InvalidBlocktank(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.InvalidBlocktank({})".format(str(self))
    _UniffiTempBlocktankError.InvalidBlocktank = InvalidBlocktank # type: ignore
    class InitializationError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.InitializationError({})".format(str(self))
    _UniffiTempBlocktankError.InitializationError = InitializationError # type: ignore
    class InsertError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.InsertError({})".format(str(self))
    _UniffiTempBlocktankError.InsertError = InsertError # type: ignore
    class RetrievalError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.RetrievalError({})".format(str(self))
    _UniffiTempBlocktankError.RetrievalError = RetrievalError # type: ignore
    class DataError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.DataError({})".format(str(self))
    _UniffiTempBlocktankError.DataError = DataError # type: ignore
    class ConnectionError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.ConnectionError({})".format(str(self))
    _UniffiTempBlocktankError.ConnectionError = ConnectionError # type: ignore
    class SerializationError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.SerializationError({})".format(str(self))
    _UniffiTempBlocktankError.SerializationError = SerializationError # type: ignore
    class ChannelOpen(_UniffiTempBlocktankError):

        def __init__(self, error_type, error_details):
            super().__init__(", ".join([
                "error_type={!r}".format(error_type),
                "error_details={!r}".format(error_details),
            ]))
            self.error_type = error_type
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.ChannelOpen({})".format(str(self))
    _UniffiTempBlocktankError.ChannelOpen = ChannelOpen # type: ignore
    class OrderState(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.OrderState({})".format(str(self))
    _UniffiTempBlocktankError.OrderState = OrderState # type: ignore
    class InvalidParameter(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.InvalidParameter({})".format(str(self))
    _UniffiTempBlocktankError.InvalidParameter = InvalidParameter # type: ignore
    class DatabaseError(_UniffiTempBlocktankError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "BlocktankError.DatabaseError({})".format(str(self))
    _UniffiTempBlocktankError.DatabaseError = DatabaseError # type: ignore

BlocktankError = _UniffiTempBlocktankError # type: ignore
del _UniffiTempBlocktankError


class _UniffiConverterTypeBlocktankError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BlocktankError.HttpClient(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return BlocktankError.BlocktankClient(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return BlocktankError.InvalidBlocktank(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return BlocktankError.InitializationError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return BlocktankError.InsertError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 6:
            return BlocktankError.RetrievalError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 7:
            return BlocktankError.DataError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 8:
            return BlocktankError.ConnectionError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 9:
            return BlocktankError.SerializationError(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 10:
            return BlocktankError.ChannelOpen(
                error_type=_UniffiConverterTypeBtChannelOrderErrorType.read(buf),
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 11:
            return BlocktankError.OrderState(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 12:
            return BlocktankError.InvalidParameter(
                error_details=_UniffiConverterString.read(buf),
            )
        if variant == 13:
            return BlocktankError.DatabaseError(
                error_details=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, BlocktankError.HttpClient):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.BlocktankClient):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.InvalidBlocktank):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.InitializationError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.InsertError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.RetrievalError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.DataError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.ConnectionError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.SerializationError):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.ChannelOpen):
            _UniffiConverterTypeBtChannelOrderErrorType.check_lower(value.error_type)
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.OrderState):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.InvalidParameter):
            _UniffiConverterString.check_lower(value.error_details)
            return
        if isinstance(value, BlocktankError.DatabaseError):
            _UniffiConverterString.check_lower(value.error_details)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, BlocktankError.HttpClient):
            buf.write_i32(1)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.BlocktankClient):
            buf.write_i32(2)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.InvalidBlocktank):
            buf.write_i32(3)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.InitializationError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.InsertError):
            buf.write_i32(5)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.RetrievalError):
            buf.write_i32(6)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.DataError):
            buf.write_i32(7)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.ConnectionError):
            buf.write_i32(8)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.SerializationError):
            buf.write_i32(9)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.ChannelOpen):
            buf.write_i32(10)
            _UniffiConverterTypeBtChannelOrderErrorType.write(value.error_type, buf)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.OrderState):
            buf.write_i32(11)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.InvalidParameter):
            buf.write_i32(12)
            _UniffiConverterString.write(value.error_details, buf)
        if isinstance(value, BlocktankError.DatabaseError):
            buf.write_i32(13)
            _UniffiConverterString.write(value.error_details, buf)





class BtBolt11InvoiceState(enum.Enum):
    PENDING = 0
    
    HOLDING = 1
    
    PAID = 2
    
    CANCELED = 3
    


class _UniffiConverterTypeBtBolt11InvoiceState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtBolt11InvoiceState.PENDING
        if variant == 2:
            return BtBolt11InvoiceState.HOLDING
        if variant == 3:
            return BtBolt11InvoiceState.PAID
        if variant == 4:
            return BtBolt11InvoiceState.CANCELED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtBolt11InvoiceState.PENDING:
            return
        if value == BtBolt11InvoiceState.HOLDING:
            return
        if value == BtBolt11InvoiceState.PAID:
            return
        if value == BtBolt11InvoiceState.CANCELED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtBolt11InvoiceState.PENDING:
            buf.write_i32(1)
        if value == BtBolt11InvoiceState.HOLDING:
            buf.write_i32(2)
        if value == BtBolt11InvoiceState.PAID:
            buf.write_i32(3)
        if value == BtBolt11InvoiceState.CANCELED:
            buf.write_i32(4)







class BtChannelOrderErrorType(enum.Enum):
    WRONG_ORDER_STATE = 0
    
    PEER_NOT_REACHABLE = 1
    
    CHANNEL_REJECTED_BY_DESTINATION = 2
    
    CHANNEL_REJECTED_BY_LSP = 3
    
    BLOCKTANK_NOT_READY = 4
    


class _UniffiConverterTypeBtChannelOrderErrorType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtChannelOrderErrorType.WRONG_ORDER_STATE
        if variant == 2:
            return BtChannelOrderErrorType.PEER_NOT_REACHABLE
        if variant == 3:
            return BtChannelOrderErrorType.CHANNEL_REJECTED_BY_DESTINATION
        if variant == 4:
            return BtChannelOrderErrorType.CHANNEL_REJECTED_BY_LSP
        if variant == 5:
            return BtChannelOrderErrorType.BLOCKTANK_NOT_READY
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtChannelOrderErrorType.WRONG_ORDER_STATE:
            return
        if value == BtChannelOrderErrorType.PEER_NOT_REACHABLE:
            return
        if value == BtChannelOrderErrorType.CHANNEL_REJECTED_BY_DESTINATION:
            return
        if value == BtChannelOrderErrorType.CHANNEL_REJECTED_BY_LSP:
            return
        if value == BtChannelOrderErrorType.BLOCKTANK_NOT_READY:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtChannelOrderErrorType.WRONG_ORDER_STATE:
            buf.write_i32(1)
        if value == BtChannelOrderErrorType.PEER_NOT_REACHABLE:
            buf.write_i32(2)
        if value == BtChannelOrderErrorType.CHANNEL_REJECTED_BY_DESTINATION:
            buf.write_i32(3)
        if value == BtChannelOrderErrorType.CHANNEL_REJECTED_BY_LSP:
            buf.write_i32(4)
        if value == BtChannelOrderErrorType.BLOCKTANK_NOT_READY:
            buf.write_i32(5)







class BtOpenChannelState(enum.Enum):
    OPENING = 0
    
    OPEN = 1
    
    CLOSED = 2
    


class _UniffiConverterTypeBtOpenChannelState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtOpenChannelState.OPENING
        if variant == 2:
            return BtOpenChannelState.OPEN
        if variant == 3:
            return BtOpenChannelState.CLOSED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtOpenChannelState.OPENING:
            return
        if value == BtOpenChannelState.OPEN:
            return
        if value == BtOpenChannelState.CLOSED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtOpenChannelState.OPENING:
            buf.write_i32(1)
        if value == BtOpenChannelState.OPEN:
            buf.write_i32(2)
        if value == BtOpenChannelState.CLOSED:
            buf.write_i32(3)







class BtOrderState(enum.Enum):
    CREATED = 0
    
    EXPIRED = 1
    
    OPEN = 2
    
    CLOSED = 3
    


class _UniffiConverterTypeBtOrderState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtOrderState.CREATED
        if variant == 2:
            return BtOrderState.EXPIRED
        if variant == 3:
            return BtOrderState.OPEN
        if variant == 4:
            return BtOrderState.CLOSED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtOrderState.CREATED:
            return
        if value == BtOrderState.EXPIRED:
            return
        if value == BtOrderState.OPEN:
            return
        if value == BtOrderState.CLOSED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtOrderState.CREATED:
            buf.write_i32(1)
        if value == BtOrderState.EXPIRED:
            buf.write_i32(2)
        if value == BtOrderState.OPEN:
            buf.write_i32(3)
        if value == BtOrderState.CLOSED:
            buf.write_i32(4)







class BtOrderState2(enum.Enum):
    CREATED = 0
    
    EXPIRED = 1
    
    EXECUTED = 2
    
    PAID = 3
    


class _UniffiConverterTypeBtOrderState2(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtOrderState2.CREATED
        if variant == 2:
            return BtOrderState2.EXPIRED
        if variant == 3:
            return BtOrderState2.EXECUTED
        if variant == 4:
            return BtOrderState2.PAID
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtOrderState2.CREATED:
            return
        if value == BtOrderState2.EXPIRED:
            return
        if value == BtOrderState2.EXECUTED:
            return
        if value == BtOrderState2.PAID:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtOrderState2.CREATED:
            buf.write_i32(1)
        if value == BtOrderState2.EXPIRED:
            buf.write_i32(2)
        if value == BtOrderState2.EXECUTED:
            buf.write_i32(3)
        if value == BtOrderState2.PAID:
            buf.write_i32(4)







class BtPaymentState(enum.Enum):
    CREATED = 0
    
    PARTIALLY_PAID = 1
    
    PAID = 2
    
    REFUNDED = 3
    
    REFUND_AVAILABLE = 4
    


class _UniffiConverterTypeBtPaymentState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtPaymentState.CREATED
        if variant == 2:
            return BtPaymentState.PARTIALLY_PAID
        if variant == 3:
            return BtPaymentState.PAID
        if variant == 4:
            return BtPaymentState.REFUNDED
        if variant == 5:
            return BtPaymentState.REFUND_AVAILABLE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtPaymentState.CREATED:
            return
        if value == BtPaymentState.PARTIALLY_PAID:
            return
        if value == BtPaymentState.PAID:
            return
        if value == BtPaymentState.REFUNDED:
            return
        if value == BtPaymentState.REFUND_AVAILABLE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtPaymentState.CREATED:
            buf.write_i32(1)
        if value == BtPaymentState.PARTIALLY_PAID:
            buf.write_i32(2)
        if value == BtPaymentState.PAID:
            buf.write_i32(3)
        if value == BtPaymentState.REFUNDED:
            buf.write_i32(4)
        if value == BtPaymentState.REFUND_AVAILABLE:
            buf.write_i32(5)







class BtPaymentState2(enum.Enum):
    CREATED = 0
    
    PAID = 1
    
    REFUNDED = 2
    
    REFUND_AVAILABLE = 3
    
    CANCELED = 4
    


class _UniffiConverterTypeBtPaymentState2(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return BtPaymentState2.CREATED
        if variant == 2:
            return BtPaymentState2.PAID
        if variant == 3:
            return BtPaymentState2.REFUNDED
        if variant == 4:
            return BtPaymentState2.REFUND_AVAILABLE
        if variant == 5:
            return BtPaymentState2.CANCELED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == BtPaymentState2.CREATED:
            return
        if value == BtPaymentState2.PAID:
            return
        if value == BtPaymentState2.REFUNDED:
            return
        if value == BtPaymentState2.REFUND_AVAILABLE:
            return
        if value == BtPaymentState2.CANCELED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == BtPaymentState2.CREATED:
            buf.write_i32(1)
        if value == BtPaymentState2.PAID:
            buf.write_i32(2)
        if value == BtPaymentState2.REFUNDED:
            buf.write_i32(3)
        if value == BtPaymentState2.REFUND_AVAILABLE:
            buf.write_i32(4)
        if value == BtPaymentState2.CANCELED:
            buf.write_i32(5)







class CJitStateEnum(enum.Enum):
    CREATED = 0
    
    COMPLETED = 1
    
    EXPIRED = 2
    
    FAILED = 3
    


class _UniffiConverterTypeCJitStateEnum(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CJitStateEnum.CREATED
        if variant == 2:
            return CJitStateEnum.COMPLETED
        if variant == 3:
            return CJitStateEnum.EXPIRED
        if variant == 4:
            return CJitStateEnum.FAILED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == CJitStateEnum.CREATED:
            return
        if value == CJitStateEnum.COMPLETED:
            return
        if value == CJitStateEnum.EXPIRED:
            return
        if value == CJitStateEnum.FAILED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == CJitStateEnum.CREATED:
            buf.write_i32(1)
        if value == CJitStateEnum.COMPLETED:
            buf.write_i32(2)
        if value == CJitStateEnum.EXPIRED:
            buf.write_i32(3)
        if value == CJitStateEnum.FAILED:
            buf.write_i32(4)




# DbError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class DbError(Exception):
    pass

_UniffiTempDbError = DbError

class DbError:  # type: ignore
    class DbActivityError(_UniffiTempDbError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "DbError.DbActivityError({})".format(str(self))
    _UniffiTempDbError.DbActivityError = DbActivityError # type: ignore
    class DbBlocktankError(_UniffiTempDbError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "DbError.DbBlocktankError({})".format(str(self))
    _UniffiTempDbError.DbBlocktankError = DbBlocktankError # type: ignore
    class InitializationError(_UniffiTempDbError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "DbError.InitializationError({})".format(str(self))
    _UniffiTempDbError.InitializationError = InitializationError # type: ignore

DbError = _UniffiTempDbError # type: ignore
del _UniffiTempDbError


class _UniffiConverterTypeDbError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return DbError.DbActivityError(
                error_details=_UniffiConverterTypeActivityError.read(buf),
            )
        if variant == 2:
            return DbError.DbBlocktankError(
                error_details=_UniffiConverterTypeBlocktankError.read(buf),
            )
        if variant == 3:
            return DbError.InitializationError(
                error_details=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, DbError.DbActivityError):
            _UniffiConverterTypeActivityError.check_lower(value.error_details)
            return
        if isinstance(value, DbError.DbBlocktankError):
            _UniffiConverterTypeBlocktankError.check_lower(value.error_details)
            return
        if isinstance(value, DbError.InitializationError):
            _UniffiConverterString.check_lower(value.error_details)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, DbError.DbActivityError):
            buf.write_i32(1)
            _UniffiConverterTypeActivityError.write(value.error_details, buf)
        if isinstance(value, DbError.DbBlocktankError):
            buf.write_i32(2)
            _UniffiConverterTypeBlocktankError.write(value.error_details, buf)
        if isinstance(value, DbError.InitializationError):
            buf.write_i32(3)
            _UniffiConverterString.write(value.error_details, buf)


# DecodingError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class DecodingError(Exception):
    pass

_UniffiTempDecodingError = DecodingError

class DecodingError:  # type: ignore
    class InvalidFormat(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidFormat({})".format(str(self))
    _UniffiTempDecodingError.InvalidFormat = InvalidFormat # type: ignore
    class InvalidNetwork(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidNetwork({})".format(str(self))
    _UniffiTempDecodingError.InvalidNetwork = InvalidNetwork # type: ignore
    class InvalidAmount(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidAmount({})".format(str(self))
    _UniffiTempDecodingError.InvalidAmount = InvalidAmount # type: ignore
    class InvalidLnurlPayAmount(_UniffiTempDecodingError):

        def __init__(self, amount_satoshis, min, max):
            super().__init__(", ".join([
                "amount_satoshis={!r}".format(amount_satoshis),
                "min={!r}".format(min),
                "max={!r}".format(max),
            ]))
            self.amount_satoshis = amount_satoshis
            self.min = min
            self.max = max
        def __repr__(self):
            return "DecodingError.InvalidLnurlPayAmount({})".format(str(self))
    _UniffiTempDecodingError.InvalidLnurlPayAmount = InvalidLnurlPayAmount # type: ignore
    class InvalidTimestamp(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidTimestamp({})".format(str(self))
    _UniffiTempDecodingError.InvalidTimestamp = InvalidTimestamp # type: ignore
    class InvalidChecksum(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidChecksum({})".format(str(self))
    _UniffiTempDecodingError.InvalidChecksum = InvalidChecksum # type: ignore
    class InvalidResponse(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidResponse({})".format(str(self))
    _UniffiTempDecodingError.InvalidResponse = InvalidResponse # type: ignore
    class UnsupportedType(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.UnsupportedType({})".format(str(self))
    _UniffiTempDecodingError.UnsupportedType = UnsupportedType # type: ignore
    class InvalidAddress(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.InvalidAddress({})".format(str(self))
    _UniffiTempDecodingError.InvalidAddress = InvalidAddress # type: ignore
    class RequestFailed(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.RequestFailed({})".format(str(self))
    _UniffiTempDecodingError.RequestFailed = RequestFailed # type: ignore
    class ClientCreationFailed(_UniffiTempDecodingError):

        def __init__(self):
            pass
        def __repr__(self):
            return "DecodingError.ClientCreationFailed({})".format(str(self))
    _UniffiTempDecodingError.ClientCreationFailed = ClientCreationFailed # type: ignore
    class InvoiceCreationFailed(_UniffiTempDecodingError):

        def __init__(self, error_message):
            super().__init__(", ".join([
                "error_message={!r}".format(error_message),
            ]))
            self.error_message = error_message
        def __repr__(self):
            return "DecodingError.InvoiceCreationFailed({})".format(str(self))
    _UniffiTempDecodingError.InvoiceCreationFailed = InvoiceCreationFailed # type: ignore

DecodingError = _UniffiTempDecodingError # type: ignore
del _UniffiTempDecodingError


class _UniffiConverterTypeDecodingError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return DecodingError.InvalidFormat(
            )
        if variant == 2:
            return DecodingError.InvalidNetwork(
            )
        if variant == 3:
            return DecodingError.InvalidAmount(
            )
        if variant == 4:
            return DecodingError.InvalidLnurlPayAmount(
                amount_satoshis=_UniffiConverterUInt64.read(buf),
                min=_UniffiConverterUInt64.read(buf),
                max=_UniffiConverterUInt64.read(buf),
            )
        if variant == 5:
            return DecodingError.InvalidTimestamp(
            )
        if variant == 6:
            return DecodingError.InvalidChecksum(
            )
        if variant == 7:
            return DecodingError.InvalidResponse(
            )
        if variant == 8:
            return DecodingError.UnsupportedType(
            )
        if variant == 9:
            return DecodingError.InvalidAddress(
            )
        if variant == 10:
            return DecodingError.RequestFailed(
            )
        if variant == 11:
            return DecodingError.ClientCreationFailed(
            )
        if variant == 12:
            return DecodingError.InvoiceCreationFailed(
                error_message=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, DecodingError.InvalidFormat):
            return
        if isinstance(value, DecodingError.InvalidNetwork):
            return
        if isinstance(value, DecodingError.InvalidAmount):
            return
        if isinstance(value, DecodingError.InvalidLnurlPayAmount):
            _UniffiConverterUInt64.check_lower(value.amount_satoshis)
            _UniffiConverterUInt64.check_lower(value.min)
            _UniffiConverterUInt64.check_lower(value.max)
            return
        if isinstance(value, DecodingError.InvalidTimestamp):
            return
        if isinstance(value, DecodingError.InvalidChecksum):
            return
        if isinstance(value, DecodingError.InvalidResponse):
            return
        if isinstance(value, DecodingError.UnsupportedType):
            return
        if isinstance(value, DecodingError.InvalidAddress):
            return
        if isinstance(value, DecodingError.RequestFailed):
            return
        if isinstance(value, DecodingError.ClientCreationFailed):
            return
        if isinstance(value, DecodingError.InvoiceCreationFailed):
            _UniffiConverterString.check_lower(value.error_message)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, DecodingError.InvalidFormat):
            buf.write_i32(1)
        if isinstance(value, DecodingError.InvalidNetwork):
            buf.write_i32(2)
        if isinstance(value, DecodingError.InvalidAmount):
            buf.write_i32(3)
        if isinstance(value, DecodingError.InvalidLnurlPayAmount):
            buf.write_i32(4)
            _UniffiConverterUInt64.write(value.amount_satoshis, buf)
            _UniffiConverterUInt64.write(value.min, buf)
            _UniffiConverterUInt64.write(value.max, buf)
        if isinstance(value, DecodingError.InvalidTimestamp):
            buf.write_i32(5)
        if isinstance(value, DecodingError.InvalidChecksum):
            buf.write_i32(6)
        if isinstance(value, DecodingError.InvalidResponse):
            buf.write_i32(7)
        if isinstance(value, DecodingError.UnsupportedType):
            buf.write_i32(8)
        if isinstance(value, DecodingError.InvalidAddress):
            buf.write_i32(9)
        if isinstance(value, DecodingError.RequestFailed):
            buf.write_i32(10)
        if isinstance(value, DecodingError.ClientCreationFailed):
            buf.write_i32(11)
        if isinstance(value, DecodingError.InvoiceCreationFailed):
            buf.write_i32(12)
            _UniffiConverterString.write(value.error_message, buf)


# HardwareError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class HardwareError(Exception):
    pass

_UniffiTempHardwareError = HardwareError

class HardwareError:  # type: ignore
    class InitializationError(_UniffiTempHardwareError):

        def __init__(self, ):
            super().__init__(", ".join([
                "={!r}".format(),
            ]))
            self. = 
        def __repr__(self):
            return "HardwareError.InitializationError({})".format(str(self))
    _UniffiTempHardwareError.InitializationError = InitializationError # type: ignore
    class IoError(_UniffiTempHardwareError):

        def __init__(self, ):
            super().__init__(", ".join([
                "={!r}".format(),
            ]))
            self. = 
        def __repr__(self):
            return "HardwareError.IoError({})".format(str(self))
    _UniffiTempHardwareError.IoError = IoError # type: ignore
    class ExecutableDirectoryError(_UniffiTempHardwareError):

        def __init__(self):
            pass
        def __repr__(self):
            return "HardwareError.ExecutableDirectoryError({})".format(str(self))
    _UniffiTempHardwareError.ExecutableDirectoryError = ExecutableDirectoryError # type: ignore
    class CommunicationError(_UniffiTempHardwareError):

        def __init__(self, ):
            super().__init__(", ".join([
                "={!r}".format(),
            ]))
            self. = 
        def __repr__(self):
            return "HardwareError.CommunicationError({})".format(str(self))
    _UniffiTempHardwareError.CommunicationError = CommunicationError # type: ignore
    class JsonError(_UniffiTempHardwareError):

        def __init__(self, ):
            super().__init__(", ".join([
                "={!r}".format(),
            ]))
            self. = 
        def __repr__(self):
            return "HardwareError.JsonError({})".format(str(self))
    _UniffiTempHardwareError.JsonError = JsonError # type: ignore

HardwareError = _UniffiTempHardwareError # type: ignore
del _UniffiTempHardwareError


class _UniffiConverterTypeHardwareError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return HardwareError.InitializationError(
                =_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return HardwareError.IoError(
                =_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return HardwareError.ExecutableDirectoryError(
            )
        if variant == 4:
            return HardwareError.CommunicationError(
                =_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return HardwareError.JsonError(
                =_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, HardwareError.InitializationError):
            _UniffiConverterString.check_lower(value.)
            return
        if isinstance(value, HardwareError.IoError):
            _UniffiConverterString.check_lower(value.)
            return
        if isinstance(value, HardwareError.ExecutableDirectoryError):
            return
        if isinstance(value, HardwareError.CommunicationError):
            _UniffiConverterString.check_lower(value.)
            return
        if isinstance(value, HardwareError.JsonError):
            _UniffiConverterString.check_lower(value.)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, HardwareError.InitializationError):
            buf.write_i32(1)
            _UniffiConverterString.write(value., buf)
        if isinstance(value, HardwareError.IoError):
            buf.write_i32(2)
            _UniffiConverterString.write(value., buf)
        if isinstance(value, HardwareError.ExecutableDirectoryError):
            buf.write_i32(3)
        if isinstance(value, HardwareError.CommunicationError):
            buf.write_i32(4)
            _UniffiConverterString.write(value., buf)
        if isinstance(value, HardwareError.JsonError):
            buf.write_i32(5)
            _UniffiConverterString.write(value., buf)


# LnurlError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class LnurlError(Exception):
    pass

_UniffiTempLnurlError = LnurlError

class LnurlError:  # type: ignore
    class InvalidAddress(_UniffiTempLnurlError):

        def __init__(self):
            pass
        def __repr__(self):
            return "LnurlError.InvalidAddress({})".format(str(self))
    _UniffiTempLnurlError.InvalidAddress = InvalidAddress # type: ignore
    class ClientCreationFailed(_UniffiTempLnurlError):

        def __init__(self):
            pass
        def __repr__(self):
            return "LnurlError.ClientCreationFailed({})".format(str(self))
    _UniffiTempLnurlError.ClientCreationFailed = ClientCreationFailed # type: ignore
    class RequestFailed(_UniffiTempLnurlError):

        def __init__(self):
            pass
        def __repr__(self):
            return "LnurlError.RequestFailed({})".format(str(self))
    _UniffiTempLnurlError.RequestFailed = RequestFailed # type: ignore
    class InvalidResponse(_UniffiTempLnurlError):

        def __init__(self):
            pass
        def __repr__(self):
            return "LnurlError.InvalidResponse({})".format(str(self))
    _UniffiTempLnurlError.InvalidResponse = InvalidResponse # type: ignore
    class InvalidAmount(_UniffiTempLnurlError):

        def __init__(self, amount_satoshis, min, max):
            super().__init__(", ".join([
                "amount_satoshis={!r}".format(amount_satoshis),
                "min={!r}".format(min),
                "max={!r}".format(max),
            ]))
            self.amount_satoshis = amount_satoshis
            self.min = min
            self.max = max
        def __repr__(self):
            return "LnurlError.InvalidAmount({})".format(str(self))
    _UniffiTempLnurlError.InvalidAmount = InvalidAmount # type: ignore
    class InvoiceCreationFailed(_UniffiTempLnurlError):

        def __init__(self, error_details):
            super().__init__(", ".join([
                "error_details={!r}".format(error_details),
            ]))
            self.error_details = error_details
        def __repr__(self):
            return "LnurlError.InvoiceCreationFailed({})".format(str(self))
    _UniffiTempLnurlError.InvoiceCreationFailed = InvoiceCreationFailed # type: ignore

LnurlError = _UniffiTempLnurlError # type: ignore
del _UniffiTempLnurlError


class _UniffiConverterTypeLnurlError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LnurlError.InvalidAddress(
            )
        if variant == 2:
            return LnurlError.ClientCreationFailed(
            )
        if variant == 3:
            return LnurlError.RequestFailed(
            )
        if variant == 4:
            return LnurlError.InvalidResponse(
            )
        if variant == 5:
            return LnurlError.InvalidAmount(
                amount_satoshis=_UniffiConverterUInt64.read(buf),
                min=_UniffiConverterUInt64.read(buf),
                max=_UniffiConverterUInt64.read(buf),
            )
        if variant == 6:
            return LnurlError.InvoiceCreationFailed(
                error_details=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, LnurlError.InvalidAddress):
            return
        if isinstance(value, LnurlError.ClientCreationFailed):
            return
        if isinstance(value, LnurlError.RequestFailed):
            return
        if isinstance(value, LnurlError.InvalidResponse):
            return
        if isinstance(value, LnurlError.InvalidAmount):
            _UniffiConverterUInt64.check_lower(value.amount_satoshis)
            _UniffiConverterUInt64.check_lower(value.min)
            _UniffiConverterUInt64.check_lower(value.max)
            return
        if isinstance(value, LnurlError.InvoiceCreationFailed):
            _UniffiConverterString.check_lower(value.error_details)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, LnurlError.InvalidAddress):
            buf.write_i32(1)
        if isinstance(value, LnurlError.ClientCreationFailed):
            buf.write_i32(2)
        if isinstance(value, LnurlError.RequestFailed):
            buf.write_i32(3)
        if isinstance(value, LnurlError.InvalidResponse):
            buf.write_i32(4)
        if isinstance(value, LnurlError.InvalidAmount):
            buf.write_i32(5)
            _UniffiConverterUInt64.write(value.amount_satoshis, buf)
            _UniffiConverterUInt64.write(value.min, buf)
            _UniffiConverterUInt64.write(value.max, buf)
        if isinstance(value, LnurlError.InvoiceCreationFailed):
            buf.write_i32(6)
            _UniffiConverterString.write(value.error_details, buf)





class ManualRefundStateEnum(enum.Enum):
    CREATED = 0
    
    APPROVED = 1
    
    REJECTED = 2
    
    SENT = 3
    


class _UniffiConverterTypeManualRefundStateEnum(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ManualRefundStateEnum.CREATED
        if variant == 2:
            return ManualRefundStateEnum.APPROVED
        if variant == 3:
            return ManualRefundStateEnum.REJECTED
        if variant == 4:
            return ManualRefundStateEnum.SENT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ManualRefundStateEnum.CREATED:
            return
        if value == ManualRefundStateEnum.APPROVED:
            return
        if value == ManualRefundStateEnum.REJECTED:
            return
        if value == ManualRefundStateEnum.SENT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ManualRefundStateEnum.CREATED:
            buf.write_i32(1)
        if value == ManualRefundStateEnum.APPROVED:
            buf.write_i32(2)
        if value == ManualRefundStateEnum.REJECTED:
            buf.write_i32(3)
        if value == ManualRefundStateEnum.SENT:
            buf.write_i32(4)







class NetworkType(enum.Enum):
    BITCOIN = 0
    
    TESTNET = 1
    
    REGTEST = 2
    
    SIGNET = 3
    


class _UniffiConverterTypeNetworkType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NetworkType.BITCOIN
        if variant == 2:
            return NetworkType.TESTNET
        if variant == 3:
            return NetworkType.REGTEST
        if variant == 4:
            return NetworkType.SIGNET
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == NetworkType.BITCOIN:
            return
        if value == NetworkType.TESTNET:
            return
        if value == NetworkType.REGTEST:
            return
        if value == NetworkType.SIGNET:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == NetworkType.BITCOIN:
            buf.write_i32(1)
        if value == NetworkType.TESTNET:
            buf.write_i32(2)
        if value == NetworkType.REGTEST:
            buf.write_i32(3)
        if value == NetworkType.SIGNET:
            buf.write_i32(4)







class PaymentState(enum.Enum):
    PENDING = 0
    
    SUCCEEDED = 1
    
    FAILED = 2
    


class _UniffiConverterTypePaymentState(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentState.PENDING
        if variant == 2:
            return PaymentState.SUCCEEDED
        if variant == 3:
            return PaymentState.FAILED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentState.PENDING:
            return
        if value == PaymentState.SUCCEEDED:
            return
        if value == PaymentState.FAILED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentState.PENDING:
            buf.write_i32(1)
        if value == PaymentState.SUCCEEDED:
            buf.write_i32(2)
        if value == PaymentState.FAILED:
            buf.write_i32(3)







class PaymentType(enum.Enum):
    SENT = 0
    
    RECEIVED = 1
    


class _UniffiConverterTypePaymentType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentType.SENT
        if variant == 2:
            return PaymentType.RECEIVED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentType.SENT:
            return
        if value == PaymentType.RECEIVED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentType.SENT:
            buf.write_i32(1)
        if value == PaymentType.RECEIVED:
            buf.write_i32(2)







class Scanner:
    def __init__(self):
        raise RuntimeError("Scanner cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class ON_CHAIN:
        invoice: "OnChainInvoice"

        @typing.no_type_check
        def __init__(self,invoice: "OnChainInvoice"):
            self.invoice = invoice

        def __str__(self):
            return "Scanner.ON_CHAIN(invoice={})".format(self.invoice)

        def __eq__(self, other):
            if not other.is_on_chain():
                return False
            if self.invoice != other.invoice:
                return False
            return True
    
    class LIGHTNING:
        invoice: "LightningInvoice"

        @typing.no_type_check
        def __init__(self,invoice: "LightningInvoice"):
            self.invoice = invoice

        def __str__(self):
            return "Scanner.LIGHTNING(invoice={})".format(self.invoice)

        def __eq__(self, other):
            if not other.is_lightning():
                return False
            if self.invoice != other.invoice:
                return False
            return True
    
    class PUBKY_AUTH:
        data: "str"

        @typing.no_type_check
        def __init__(self,data: "str"):
            self.data = data

        def __str__(self):
            return "Scanner.PUBKY_AUTH(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_pubky_auth():
                return False
            if self.data != other.data:
                return False
            return True
    
    class LNURL_CHANNEL:
        data: "LnurlChannelData"

        @typing.no_type_check
        def __init__(self,data: "LnurlChannelData"):
            self.data = data

        def __str__(self):
            return "Scanner.LNURL_CHANNEL(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_channel():
                return False
            if self.data != other.data:
                return False
            return True
    
    class LNURL_AUTH:
        data: "LnurlAuthData"

        @typing.no_type_check
        def __init__(self,data: "LnurlAuthData"):
            self.data = data

        def __str__(self):
            return "Scanner.LNURL_AUTH(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_auth():
                return False
            if self.data != other.data:
                return False
            return True
    
    class LNURL_WITHDRAW:
        data: "LnurlWithdrawData"

        @typing.no_type_check
        def __init__(self,data: "LnurlWithdrawData"):
            self.data = data

        def __str__(self):
            return "Scanner.LNURL_WITHDRAW(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_withdraw():
                return False
            if self.data != other.data:
                return False
            return True
    
    class LNURL_ADDRESS:
        data: "LnurlAddressData"

        @typing.no_type_check
        def __init__(self,data: "LnurlAddressData"):
            self.data = data

        def __str__(self):
            return "Scanner.LNURL_ADDRESS(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_address():
                return False
            if self.data != other.data:
                return False
            return True
    
    class LNURL_PAY:
        data: "LnurlPayData"

        @typing.no_type_check
        def __init__(self,data: "LnurlPayData"):
            self.data = data

        def __str__(self):
            return "Scanner.LNURL_PAY(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_pay():
                return False
            if self.data != other.data:
                return False
            return True
    
    class NODE_ID:
        url: "str"
        network: "NetworkType"

        @typing.no_type_check
        def __init__(self,url: "str", network: "NetworkType"):
            self.url = url
            self.network = network

        def __str__(self):
            return "Scanner.NODE_ID(url={}, network={})".format(self.url, self.network)

        def __eq__(self, other):
            if not other.is_node_id():
                return False
            if self.url != other.url:
                return False
            if self.network != other.network:
                return False
            return True
    
    class TREASURE_HUNT:
        chest_id: "str"

        @typing.no_type_check
        def __init__(self,chest_id: "str"):
            self.chest_id = chest_id

        def __str__(self):
            return "Scanner.TREASURE_HUNT(chest_id={})".format(self.chest_id)

        def __eq__(self, other):
            if not other.is_treasure_hunt():
                return False
            if self.chest_id != other.chest_id:
                return False
            return True
    
    class ORANGE_TICKET:
        ticket_id: "str"

        @typing.no_type_check
        def __init__(self,ticket_id: "str"):
            self.ticket_id = ticket_id

        def __str__(self):
            return "Scanner.ORANGE_TICKET(ticket_id={})".format(self.ticket_id)

        def __eq__(self, other):
            if not other.is_orange_ticket():
                return False
            if self.ticket_id != other.ticket_id:
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_on_chain(self) -> bool:
        return isinstance(self, Scanner.ON_CHAIN)
    def is_lightning(self) -> bool:
        return isinstance(self, Scanner.LIGHTNING)
    def is_pubky_auth(self) -> bool:
        return isinstance(self, Scanner.PUBKY_AUTH)
    def is_lnurl_channel(self) -> bool:
        return isinstance(self, Scanner.LNURL_CHANNEL)
    def is_lnurl_auth(self) -> bool:
        return isinstance(self, Scanner.LNURL_AUTH)
    def is_lnurl_withdraw(self) -> bool:
        return isinstance(self, Scanner.LNURL_WITHDRAW)
    def is_lnurl_address(self) -> bool:
        return isinstance(self, Scanner.LNURL_ADDRESS)
    def is_lnurl_pay(self) -> bool:
        return isinstance(self, Scanner.LNURL_PAY)
    def is_node_id(self) -> bool:
        return isinstance(self, Scanner.NODE_ID)
    def is_treasure_hunt(self) -> bool:
        return isinstance(self, Scanner.TREASURE_HUNT)
    def is_orange_ticket(self) -> bool:
        return isinstance(self, Scanner.ORANGE_TICKET)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Scanner.ON_CHAIN = type("Scanner.ON_CHAIN", (Scanner.ON_CHAIN, Scanner,), {})  # type: ignore
Scanner.LIGHTNING = type("Scanner.LIGHTNING", (Scanner.LIGHTNING, Scanner,), {})  # type: ignore
Scanner.PUBKY_AUTH = type("Scanner.PUBKY_AUTH", (Scanner.PUBKY_AUTH, Scanner,), {})  # type: ignore
Scanner.LNURL_CHANNEL = type("Scanner.LNURL_CHANNEL", (Scanner.LNURL_CHANNEL, Scanner,), {})  # type: ignore
Scanner.LNURL_AUTH = type("Scanner.LNURL_AUTH", (Scanner.LNURL_AUTH, Scanner,), {})  # type: ignore
Scanner.LNURL_WITHDRAW = type("Scanner.LNURL_WITHDRAW", (Scanner.LNURL_WITHDRAW, Scanner,), {})  # type: ignore
Scanner.LNURL_ADDRESS = type("Scanner.LNURL_ADDRESS", (Scanner.LNURL_ADDRESS, Scanner,), {})  # type: ignore
Scanner.LNURL_PAY = type("Scanner.LNURL_PAY", (Scanner.LNURL_PAY, Scanner,), {})  # type: ignore
Scanner.NODE_ID = type("Scanner.NODE_ID", (Scanner.NODE_ID, Scanner,), {})  # type: ignore
Scanner.TREASURE_HUNT = type("Scanner.TREASURE_HUNT", (Scanner.TREASURE_HUNT, Scanner,), {})  # type: ignore
Scanner.ORANGE_TICKET = type("Scanner.ORANGE_TICKET", (Scanner.ORANGE_TICKET, Scanner,), {})  # type: ignore




class _UniffiConverterTypeScanner(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Scanner.ON_CHAIN(
                _UniffiConverterTypeOnChainInvoice.read(buf),
            )
        if variant == 2:
            return Scanner.LIGHTNING(
                _UniffiConverterTypeLightningInvoice.read(buf),
            )
        if variant == 3:
            return Scanner.PUBKY_AUTH(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return Scanner.LNURL_CHANNEL(
                _UniffiConverterTypeLnurlChannelData.read(buf),
            )
        if variant == 5:
            return Scanner.LNURL_AUTH(
                _UniffiConverterTypeLnurlAuthData.read(buf),
            )
        if variant == 6:
            return Scanner.LNURL_WITHDRAW(
                _UniffiConverterTypeLnurlWithdrawData.read(buf),
            )
        if variant == 7:
            return Scanner.LNURL_ADDRESS(
                _UniffiConverterTypeLnurlAddressData.read(buf),
            )
        if variant == 8:
            return Scanner.LNURL_PAY(
                _UniffiConverterTypeLnurlPayData.read(buf),
            )
        if variant == 9:
            return Scanner.NODE_ID(
                _UniffiConverterString.read(buf),
                _UniffiConverterTypeNetworkType.read(buf),
            )
        if variant == 10:
            return Scanner.TREASURE_HUNT(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return Scanner.ORANGE_TICKET(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_on_chain():
            _UniffiConverterTypeOnChainInvoice.check_lower(value.invoice)
            return
        if value.is_lightning():
            _UniffiConverterTypeLightningInvoice.check_lower(value.invoice)
            return
        if value.is_pubky_auth():
            _UniffiConverterString.check_lower(value.data)
            return
        if value.is_lnurl_channel():
            _UniffiConverterTypeLnurlChannelData.check_lower(value.data)
            return
        if value.is_lnurl_auth():
            _UniffiConverterTypeLnurlAuthData.check_lower(value.data)
            return
        if value.is_lnurl_withdraw():
            _UniffiConverterTypeLnurlWithdrawData.check_lower(value.data)
            return
        if value.is_lnurl_address():
            _UniffiConverterTypeLnurlAddressData.check_lower(value.data)
            return
        if value.is_lnurl_pay():
            _UniffiConverterTypeLnurlPayData.check_lower(value.data)
            return
        if value.is_node_id():
            _UniffiConverterString.check_lower(value.url)
            _UniffiConverterTypeNetworkType.check_lower(value.network)
            return
        if value.is_treasure_hunt():
            _UniffiConverterString.check_lower(value.chest_id)
            return
        if value.is_orange_ticket():
            _UniffiConverterString.check_lower(value.ticket_id)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_on_chain():
            buf.write_i32(1)
            _UniffiConverterTypeOnChainInvoice.write(value.invoice, buf)
        if value.is_lightning():
            buf.write_i32(2)
            _UniffiConverterTypeLightningInvoice.write(value.invoice, buf)
        if value.is_pubky_auth():
            buf.write_i32(3)
            _UniffiConverterString.write(value.data, buf)
        if value.is_lnurl_channel():
            buf.write_i32(4)
            _UniffiConverterTypeLnurlChannelData.write(value.data, buf)
        if value.is_lnurl_auth():
            buf.write_i32(5)
            _UniffiConverterTypeLnurlAuthData.write(value.data, buf)
        if value.is_lnurl_withdraw():
            buf.write_i32(6)
            _UniffiConverterTypeLnurlWithdrawData.write(value.data, buf)
        if value.is_lnurl_address():
            buf.write_i32(7)
            _UniffiConverterTypeLnurlAddressData.write(value.data, buf)
        if value.is_lnurl_pay():
            buf.write_i32(8)
            _UniffiConverterTypeLnurlPayData.write(value.data, buf)
        if value.is_node_id():
            buf.write_i32(9)
            _UniffiConverterString.write(value.url, buf)
            _UniffiConverterTypeNetworkType.write(value.network, buf)
        if value.is_treasure_hunt():
            buf.write_i32(10)
            _UniffiConverterString.write(value.chest_id, buf)
        if value.is_orange_ticket():
            buf.write_i32(11)
            _UniffiConverterString.write(value.ticket_id, buf)







class SortDirection(enum.Enum):
    ASC = 0
    
    DESC = 1
    


class _UniffiConverterTypeSortDirection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return SortDirection.ASC
        if variant == 2:
            return SortDirection.DESC
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == SortDirection.ASC:
            return
        if value == SortDirection.DESC:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == SortDirection.ASC:
            buf.write_i32(1)
        if value == SortDirection.DESC:
            buf.write_i32(2)





class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBool(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBool.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBool.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBytes(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBytes.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBytes.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBytes.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeCreateCjitOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeCreateCjitOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeCreateCjitOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeCreateCjitOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeCreateOrderOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeCreateOrderOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeCreateOrderOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeCreateOrderOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeIBtChannel(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeIBtChannel.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeIBtChannel.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeIBtChannel.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeIBtChannelClose(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeIBtChannelClose.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeIBtChannelClose.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeIBtChannelClose.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeIBtInfo(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeIBtInfo.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeIBtInfo.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeIBtInfo.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeIDiscount(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeIDiscount.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeIDiscount.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeIDiscount.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeActivity(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeActivity.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeActivity.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeActivity.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeActivityFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeActivityFilter.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeActivityFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeActivityFilter.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeBtOrderState2(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeBtOrderState2.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeBtOrderState2.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeBtOrderState2.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeCJitStateEnum(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeCJitStateEnum.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeCJitStateEnum.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeCJitStateEnum.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePaymentType(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePaymentType.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePaymentType.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePaymentType.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeSortDirection(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeSortDirection.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeSortDirection.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeSortDirection.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeIManualRefund(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeIManualRefund.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeIManualRefund.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeIManualRefund.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeIBtOnchainTransaction(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeIBtOnchainTransaction.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeIBtOnchainTransaction.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeIBtOnchainTransaction.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeIBtOrder(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeIBtOrder.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeIBtOrder.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeIBtOrder.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeICJitEntry(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeICJitEntry.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeICJitEntry.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeICJitEntry.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeILspNode(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeILspNode.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeILspNode.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeILspNode.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeIManualRefund(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeIManualRefund.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeIManualRefund.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeIManualRefund.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeActivity(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeActivity.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeActivity.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeActivity.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterString.read(buf)
            d[key] = val
        return d

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global UNIFFI_GLOBAL_EVENT_LOOP
    UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

def add_tags(activity_id: "str",tags: "typing.List[str]") -> None:
    _UniffiConverterString.check_lower(activity_id)
    
    _UniffiConverterSequenceString.check_lower(tags)
    
    _rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_add_tags,
        _UniffiConverterString.lower(activity_id),
        _UniffiConverterSequenceString.lower(tags))

async def create_cjit_entry(channel_size_sat: "int",invoice_sat: "int",invoice_description: "str",node_id: "str",channel_expiry_weeks: "int",options: "typing.Optional[CreateCjitOptions]") -> "IcJitEntry":

    _UniffiConverterUInt64.check_lower(channel_size_sat)
    
    _UniffiConverterUInt64.check_lower(invoice_sat)
    
    _UniffiConverterString.check_lower(invoice_description)
    
    _UniffiConverterString.check_lower(node_id)
    
    _UniffiConverterUInt32.check_lower(channel_expiry_weeks)
    
    _UniffiConverterOptionalTypeCreateCjitOptions.check_lower(options)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_create_cjit_entry(
        _UniffiConverterUInt64.lower(channel_size_sat),
        _UniffiConverterUInt64.lower(invoice_sat),
        _UniffiConverterString.lower(invoice_description),
        _UniffiConverterString.lower(node_id),
        _UniffiConverterUInt32.lower(channel_expiry_weeks),
        _UniffiConverterOptionalTypeCreateCjitOptions.lower(options)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeICJitEntry.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def create_order(lsp_balance_sat: "int",channel_expiry_weeks: "int",options: "typing.Optional[CreateOrderOptions]") -> "IBtOrder":

    _UniffiConverterUInt64.check_lower(lsp_balance_sat)
    
    _UniffiConverterUInt32.check_lower(channel_expiry_weeks)
    
    _UniffiConverterOptionalTypeCreateOrderOptions.check_lower(options)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_create_order(
        _UniffiConverterUInt64.lower(lsp_balance_sat),
        _UniffiConverterUInt32.lower(channel_expiry_weeks),
        _UniffiConverterOptionalTypeCreateOrderOptions.lower(options)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBtOrder.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def decode(invoice: "str") -> "Scanner":

    _UniffiConverterString.check_lower(invoice)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_decode(
        _UniffiConverterString.lower(invoice)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeScanner.lift,
        
    # Error FFI converter
_UniffiConverterTypeDecodingError,

    )

def delete_activity_by_id(activity_id: "str") -> "bool":
    _UniffiConverterString.check_lower(activity_id)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_delete_activity_by_id,
        _UniffiConverterString.lower(activity_id)))

async def estimate_order_fee(lsp_balance_sat: "int",channel_expiry_weeks: "int",options: "typing.Optional[CreateOrderOptions]") -> "IBtEstimateFeeResponse":

    _UniffiConverterUInt64.check_lower(lsp_balance_sat)
    
    _UniffiConverterUInt32.check_lower(channel_expiry_weeks)
    
    _UniffiConverterOptionalTypeCreateOrderOptions.check_lower(options)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee(
        _UniffiConverterUInt64.lower(lsp_balance_sat),
        _UniffiConverterUInt32.lower(channel_expiry_weeks),
        _UniffiConverterOptionalTypeCreateOrderOptions.lower(options)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBtEstimateFeeResponse.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def estimate_order_fee_full(lsp_balance_sat: "int",channel_expiry_weeks: "int",options: "typing.Optional[CreateOrderOptions]") -> "IBtEstimateFeeResponse2":

    _UniffiConverterUInt64.check_lower(lsp_balance_sat)
    
    _UniffiConverterUInt32.check_lower(channel_expiry_weeks)
    
    _UniffiConverterOptionalTypeCreateOrderOptions.check_lower(options)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_estimate_order_fee_full(
        _UniffiConverterUInt64.lower(lsp_balance_sat),
        _UniffiConverterUInt32.lower(channel_expiry_weeks),
        _UniffiConverterOptionalTypeCreateOrderOptions.lower(options)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBtEstimateFeeResponse2.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )

def get_activities(filter: "typing.Optional[ActivityFilter]",tx_type: "typing.Optional[PaymentType]",tags: "typing.Optional[typing.List[str]]",search: "typing.Optional[str]",min_date: "typing.Optional[int]",max_date: "typing.Optional[int]",limit: "typing.Optional[int]",sort_direction: "typing.Optional[SortDirection]") -> "typing.List[Activity]":
    _UniffiConverterOptionalTypeActivityFilter.check_lower(filter)
    
    _UniffiConverterOptionalTypePaymentType.check_lower(tx_type)
    
    _UniffiConverterOptionalSequenceString.check_lower(tags)
    
    _UniffiConverterOptionalString.check_lower(search)
    
    _UniffiConverterOptionalUInt64.check_lower(min_date)
    
    _UniffiConverterOptionalUInt64.check_lower(max_date)
    
    _UniffiConverterOptionalUInt32.check_lower(limit)
    
    _UniffiConverterOptionalTypeSortDirection.check_lower(sort_direction)
    
    return _UniffiConverterSequenceTypeActivity.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_get_activities,
        _UniffiConverterOptionalTypeActivityFilter.lower(filter),
        _UniffiConverterOptionalTypePaymentType.lower(tx_type),
        _UniffiConverterOptionalSequenceString.lower(tags),
        _UniffiConverterOptionalString.lower(search),
        _UniffiConverterOptionalUInt64.lower(min_date),
        _UniffiConverterOptionalUInt64.lower(max_date),
        _UniffiConverterOptionalUInt32.lower(limit),
        _UniffiConverterOptionalTypeSortDirection.lower(sort_direction)))


def get_activities_by_tag(tag: "str",limit: "typing.Optional[int]",sort_direction: "typing.Optional[SortDirection]") -> "typing.List[Activity]":
    _UniffiConverterString.check_lower(tag)
    
    _UniffiConverterOptionalUInt32.check_lower(limit)
    
    _UniffiConverterOptionalTypeSortDirection.check_lower(sort_direction)
    
    return _UniffiConverterSequenceTypeActivity.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_get_activities_by_tag,
        _UniffiConverterString.lower(tag),
        _UniffiConverterOptionalUInt32.lower(limit),
        _UniffiConverterOptionalTypeSortDirection.lower(sort_direction)))


def get_activity_by_id(activity_id: "str") -> "typing.Optional[Activity]":
    _UniffiConverterString.check_lower(activity_id)
    
    return _UniffiConverterOptionalTypeActivity.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_get_activity_by_id,
        _UniffiConverterString.lower(activity_id)))


def get_all_unique_tags() -> "typing.List[str]":
    return _UniffiConverterSequenceString.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_get_all_unique_tags,))

async def get_cjit_entries(entry_ids: "typing.Optional[typing.List[str]]",filter: "typing.Optional[CJitStateEnum]",refresh: "bool") -> "typing.List[IcJitEntry]":

    _UniffiConverterOptionalSequenceString.check_lower(entry_ids)
    
    _UniffiConverterOptionalTypeCJitStateEnum.check_lower(filter)
    
    _UniffiConverterBool.check_lower(refresh)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_cjit_entries(
        _UniffiConverterOptionalSequenceString.lower(entry_ids),
        _UniffiConverterOptionalTypeCJitStateEnum.lower(filter),
        _UniffiConverterBool.lower(refresh)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeICJitEntry.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def get_info(refresh: "typing.Optional[bool]") -> "typing.Optional[IBtInfo]":

    _UniffiConverterOptionalBool.check_lower(refresh)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_info(
        _UniffiConverterOptionalBool.lower(refresh)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterOptionalTypeIBtInfo.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def get_lnurl_invoice(address: "str",amount_satoshis: "int") -> "str":

    _UniffiConverterString.check_lower(address)
    
    _UniffiConverterUInt64.check_lower(amount_satoshis)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice(
        _UniffiConverterString.lower(address),
        _UniffiConverterUInt64.lower(amount_satoshis)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeLnurlError,

    )
async def get_min_zero_conf_tx_fee(order_id: "str") -> "IBt0ConfMinTxFeeWindow":

    _UniffiConverterString.check_lower(order_id)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee(
        _UniffiConverterString.lower(order_id)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBt0ConfMinTxFeeWindow.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def get_orders(order_ids: "typing.Optional[typing.List[str]]",filter: "typing.Optional[BtOrderState2]",refresh: "bool") -> "typing.List[IBtOrder]":

    _UniffiConverterOptionalSequenceString.check_lower(order_ids)
    
    _UniffiConverterOptionalTypeBtOrderState2.check_lower(filter)
    
    _UniffiConverterBool.check_lower(refresh)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_orders(
        _UniffiConverterOptionalSequenceString.lower(order_ids),
        _UniffiConverterOptionalTypeBtOrderState2.lower(filter),
        _UniffiConverterBool.lower(refresh)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeIBtOrder.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )

def get_tags(activity_id: "str") -> "typing.List[str]":
    _UniffiConverterString.check_lower(activity_id)
    
    return _UniffiConverterSequenceString.lift(_rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_get_tags,
        _UniffiConverterString.lower(activity_id)))


def init_db(base_path: "str") -> "str":
    _UniffiConverterString.check_lower(base_path)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeDbError,_UniffiLib.uniffi_bitkitcore_fn_func_init_db,
        _UniffiConverterString.lower(base_path)))


def initialize_trezor_library() -> "str":
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeHardwareError,_UniffiLib.uniffi_bitkitcore_fn_func_initialize_trezor_library,))


def insert_activity(activity: "Activity") -> None:
    _UniffiConverterTypeActivity.check_lower(activity)
    
    _rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_insert_activity,
        _UniffiConverterTypeActivity.lower(activity))

async def open_channel(order_id: "str",connection_string: "str") -> "IBtOrder":

    _UniffiConverterString.check_lower(order_id)
    
    _UniffiConverterString.check_lower(connection_string)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_open_channel(
        _UniffiConverterString.lower(order_id),
        _UniffiConverterString.lower(connection_string)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBtOrder.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def refresh_active_cjit_entries() -> "typing.List[IcJitEntry]":

    """
    Refresh all active CJIT entries in the database with latest data from the LSP
    """

    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_cjit_entries(),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeICJitEntry.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def refresh_active_orders() -> "typing.List[IBtOrder]":

    """
    Refresh all active orders in the database with latest data from the LSP
    """

    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_refresh_active_orders(),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeIBtOrder.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def register_device(device_token: "str",public_key: "str",features: "typing.List[str]",node_id: "str",iso_timestamp: "str",signature: "str",custom_url: "typing.Optional[str]") -> "str":

    _UniffiConverterString.check_lower(device_token)
    
    _UniffiConverterString.check_lower(public_key)
    
    _UniffiConverterSequenceString.check_lower(features)
    
    _UniffiConverterString.check_lower(node_id)
    
    _UniffiConverterString.check_lower(iso_timestamp)
    
    _UniffiConverterString.check_lower(signature)
    
    _UniffiConverterOptionalString.check_lower(custom_url)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_register_device(
        _UniffiConverterString.lower(device_token),
        _UniffiConverterString.lower(public_key),
        _UniffiConverterSequenceString.lower(features),
        _UniffiConverterString.lower(node_id),
        _UniffiConverterString.lower(iso_timestamp),
        _UniffiConverterString.lower(signature),
        _UniffiConverterOptionalString.lower(custom_url)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def regtest_close_channel(funding_tx_id: "str",vout: "int",force_close_after_s: "typing.Optional[int]") -> "str":

    _UniffiConverterString.check_lower(funding_tx_id)
    
    _UniffiConverterUInt32.check_lower(vout)
    
    _UniffiConverterOptionalUInt64.check_lower(force_close_after_s)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_regtest_close_channel(
        _UniffiConverterString.lower(funding_tx_id),
        _UniffiConverterUInt32.lower(vout),
        _UniffiConverterOptionalUInt64.lower(force_close_after_s)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def regtest_deposit(address: "str",amount_sat: "typing.Optional[int]") -> "str":

    _UniffiConverterString.check_lower(address)
    
    _UniffiConverterOptionalUInt64.check_lower(amount_sat)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_regtest_deposit(
        _UniffiConverterString.lower(address),
        _UniffiConverterOptionalUInt64.lower(amount_sat)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def regtest_get_payment(payment_id: "str") -> "IBtBolt11Invoice":

    _UniffiConverterString.check_lower(payment_id)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_regtest_get_payment(
        _UniffiConverterString.lower(payment_id)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeIBtBolt11Invoice.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def regtest_mine(count: "typing.Optional[int]") -> None:

    _UniffiConverterOptionalUInt32.check_lower(count)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_regtest_mine(
        _UniffiConverterOptionalUInt32.lower(count)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_void,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_void,
        _UniffiLib.ffi_bitkitcore_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )
async def regtest_pay(invoice: "str",amount_sat: "typing.Optional[int]") -> "str":

    _UniffiConverterString.check_lower(invoice)
    
    _UniffiConverterOptionalUInt64.check_lower(amount_sat)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_regtest_pay(
        _UniffiConverterString.lower(invoice),
        _UniffiConverterOptionalUInt64.lower(amount_sat)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )

def remove_tags(activity_id: "str",tags: "typing.List[str]") -> None:
    _UniffiConverterString.check_lower(activity_id)
    
    _UniffiConverterSequenceString.check_lower(tags)
    
    _rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_remove_tags,
        _UniffiConverterString.lower(activity_id),
        _UniffiConverterSequenceString.lower(tags))

async def test_notification(device_token: "str",secret_message: "str",notification_type: "typing.Optional[str]",custom_url: "typing.Optional[str]") -> "str":

    _UniffiConverterString.check_lower(device_token)
    
    _UniffiConverterString.check_lower(secret_message)
    
    _UniffiConverterOptionalString.check_lower(notification_type)
    
    _UniffiConverterOptionalString.check_lower(custom_url)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_test_notification(
        _UniffiConverterString.lower(device_token),
        _UniffiConverterString.lower(secret_message),
        _UniffiConverterOptionalString.lower(notification_type),
        _UniffiConverterOptionalString.lower(custom_url)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )

def update_activity(activity_id: "str",activity: "Activity") -> None:
    _UniffiConverterString.check_lower(activity_id)
    
    _UniffiConverterTypeActivity.check_lower(activity)
    
    _rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_update_activity,
        _UniffiConverterString.lower(activity_id),
        _UniffiConverterTypeActivity.lower(activity))

async def update_blocktank_url(new_url: "str") -> None:

    _UniffiConverterString.check_lower(new_url)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_update_blocktank_url(
        _UniffiConverterString.lower(new_url)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_void,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_void,
        _UniffiLib.ffi_bitkitcore_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeBlocktankError,

    )

def upsert_activity(activity: "Activity") -> None:
    _UniffiConverterTypeActivity.check_lower(activity)
    
    _rust_call_with_error(_UniffiConverterTypeActivityError,_UniffiLib.uniffi_bitkitcore_fn_func_upsert_activity,
        _UniffiConverterTypeActivity.lower(activity))


def validate_bitcoin_address(address: "str") -> "ValidationResult":
    _UniffiConverterString.check_lower(address)
    
    return _UniffiConverterTypeValidationResult.lift(_rust_call_with_error(_UniffiConverterTypeAddressError,_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address,
        _UniffiConverterString.lower(address)))


__all__ = [
    "InternalError",
    "Activity",
    "ActivityError",
    "ActivityFilter",
    "ActivityType",
    "AddressError",
    "AddressType",
    "BitcoinNetworkEnum",
    "BlocktankError",
    "BtBolt11InvoiceState",
    "BtChannelOrderErrorType",
    "BtOpenChannelState",
    "BtOrderState",
    "BtOrderState2",
    "BtPaymentState",
    "BtPaymentState2",
    "CJitStateEnum",
    "DbError",
    "DecodingError",
    "HardwareError",
    "LnurlError",
    "ManualRefundStateEnum",
    "NetworkType",
    "PaymentState",
    "PaymentType",
    "Scanner",
    "SortDirection",
    "CreateCjitOptions",
    "CreateOrderOptions",
    "ErrorData",
    "FeeRates",
    "FundingTx",
    "IBt0ConfMinTxFeeWindow",
    "IBtBolt11Invoice",
    "IBtChannel",
    "IBtChannelClose",
    "IBtEstimateFeeResponse",
    "IBtEstimateFeeResponse2",
    "IBtInfo",
    "IBtInfoOnchain",
    "IBtInfoOptions",
    "IBtInfoVersions",
    "IBtOnchainTransaction",
    "IBtOnchainTransactions",
    "IBtOrder",
    "IBtPayment",
    "IcJitEntry",
    "IDiscount",
    "ILspNode",
    "IManualRefund",
    "LightningActivity",
    "LightningInvoice",
    "LnurlAddressData",
    "LnurlAuthData",
    "LnurlChannelData",
    "LnurlPayData",
    "LnurlWithdrawData",
    "OnChainInvoice",
    "OnchainActivity",
    "PubkyAuth",
    "ValidationResult",
    "add_tags",
    "create_cjit_entry",
    "create_order",
    "decode",
    "delete_activity_by_id",
    "estimate_order_fee",
    "estimate_order_fee_full",
    "get_activities",
    "get_activities_by_tag",
    "get_activity_by_id",
    "get_all_unique_tags",
    "get_cjit_entries",
    "get_info",
    "get_lnurl_invoice",
    "get_min_zero_conf_tx_fee",
    "get_orders",
    "get_tags",
    "init_db",
    "initialize_trezor_library",
    "insert_activity",
    "open_channel",
    "refresh_active_cjit_entries",
    "refresh_active_orders",
    "register_device",
    "regtest_close_channel",
    "regtest_deposit",
    "regtest_get_payment",
    "regtest_mine",
    "regtest_pay",
    "remove_tags",
    "test_notification",
    "update_activity",
    "update_blocktank_url",
    "upsert_activity",
    "validate_bitcoin_address",
    "uniffi_set_event_loop",
]

